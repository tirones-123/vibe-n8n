{
  "displayName": "HTML",
  "group": [
    "transform"
  ],
  "version": [
    1,
    1.1,
    1.2
  ],
  "subtitle": "={{ $parameter[\"operation\"] }}",
  "description": "Work with HTML",
  "defaults": {
    "name": "HTML"
  },
  "inputs": [
    "main"
  ],
  "outputs": [
    "main"
  ],
  "parameterPane": "wide",
  "properties": [
    {
      "displayName": "Operation",
      "name": "operation",
      "type": "options",
      "noDataExpression": true,
      "options": [
        {
          "name": "Generate HTML Template",
          "value": "generateHtmlTemplate",
          "action": "Generate HTML template"
        },
        {
          "name": "Extract HTML Content",
          "value": "extractHtmlContent",
          "action": "Extract HTML Content"
        },
        {
          "name": "Convert to HTML Table",
          "value": "convertToHtmlTable",
          "action": "Convert to HTML Table"
        }
      ],
      "default": "generateHtmlTemplate"
    },
    {
      "displayName": "HTML Template",
      "name": "html",
      "typeOptions": {
        "editor": "htmlEditor"
      },
      "type": "string",
      "default": "<!DOCTYPE html>\n\n<html>\n<head>\n  <meta charset=\"UTF-8\" />\n  <title>My HTML document</title>\n</head>\n<body>\n  <div class=\"container\">\n    <h1>This is an H1 heading</h1>\n    <h2>This is an H2 heading</h2>\n    <p>This is a paragraph</p>\n  </div>\n</body>\n</html>\n\n<style>\n.container {\n  background-color: #ffffff;\n  text-align: center;\n  padding: 16px;\n  border-radius: 8px;\n}\n\nh1 {\n  color: #ff6d5a;\n  font-size: 24px;\n  font-weight: bold;\n  padding: 8px;\n}\n\nh2 {\n  color: #909399;\n  font-size: 18px;\n  font-weight: bold;\n  padding: 8px;\n}\n</style>\n\n<script>\nconsole.log(\"Hello World!\");\n</script>",
      "noDataExpression": true,
      "description": "HTML template to render",
      "displayOptions": {
        "show": {
          "operation": [
            "generateHtmlTemplate"
          ]
        }
      }
    },
    {
      "displayName": "<b>Tips</b>: Type ctrl+space for completions. Use <code>{{ }}</code> for expressions and <code>&lt;style&gt;</code> tags for CSS. JS in <code>&lt;script&gt;</code> tags is included but not executed in n8n.",
      "name": "notice",
      "type": "notice",
      "default": "",
      "displayOptions": {
        "show": {
          "operation": [
            "generateHtmlTemplate"
          ]
        }
      }
    },
    {
      "displayName": "Source Data",
      "name": "sourceData",
      "type": "options",
      "options": [
        {
          "name": "Binary",
          "value": "binary"
        },
        {
          "name": "JSON",
          "value": "json"
        }
      ],
      "default": "json",
      "description": "If HTML should be read from binary or JSON data",
      "displayOptions": {
        "show": {
          "operation": [
            "extractHtmlContent"
          ]
        }
      }
    },
    {
      "displayName": "Input Binary Field",
      "name": "dataPropertyName",
      "type": "string",
      "requiresDataPath": "single",
      "displayOptions": {
        "show": {
          "operation": [
            "extractHtmlContent"
          ],
          "sourceData": [
            "binary"
          ]
        }
      },
      "default": "data",
      "required": true,
      "hint": "The name of the input binary field containing the file to be extracted"
    },
    {
      "displayName": "JSON Property",
      "name": "dataPropertyName",
      "type": "string",
      "requiresDataPath": "single",
      "displayOptions": {
        "show": {
          "operation": [
            "extractHtmlContent"
          ],
          "sourceData": [
            "json"
          ]
        }
      },
      "default": "data",
      "required": true,
      "description": "Name of the JSON property in which the HTML to extract the data from can be found. The property can either contain a string or an array of strings."
    },
    {
      "displayName": "Extraction Values",
      "name": "extractionValues",
      "placeholder": "Add Value",
      "type": "fixedCollection",
      "typeOptions": {
        "multipleValues": true
      },
      "default": {},
      "options": [
        {
          "name": "values",
          "displayName": "Values",
          "values": [
            {
              "displayName": "Key",
              "name": "key",
              "type": "string",
              "default": "",
              "description": "The key under which the extracted value should be saved"
            },
            {
              "displayName": "CSS Selector",
              "name": "cssSelector",
              "type": "string",
              "default": "",
              "placeholder": ".price",
              "description": "The CSS selector to use"
            },
            {
              "displayName": "Return Value",
              "name": "returnValue",
              "type": "options",
              "options": [
                {
                  "name": "Attribute",
                  "value": "attribute",
                  "description": "Get an attribute value like \"class\" from an element"
                },
                {
                  "name": "HTML",
                  "value": "html",
                  "description": "Get the HTML the element contains"
                },
                {
                  "name": "Text",
                  "value": "text",
                  "description": "Get only the text content of the element"
                },
                {
                  "name": "Value",
                  "value": "value",
                  "description": "Get value of an input, select or textarea"
                }
              ],
              "default": "text",
              "description": "What kind of data should be returned"
            },
            {
              "displayName": "Attribute",
              "name": "attribute",
              "type": "string",
              "displayOptions": {
                "show": {
                  "returnValue": [
                    "attribute"
                  ]
                }
              },
              "default": "",
              "placeholder": "class",
              "description": "The name of the attribute to return the value off"
            },
            {
              "displayName": "Skip Selectors",
              "name": "skipSelectors",
              "type": "string",
              "displayOptions": {
                "show": {
                  "returnValue": [
                    "text"
                  ],
                  "@version": [
                    {
                      "_cnd": {
                        "gt": 1.1
                      }
                    }
                  ]
                }
              },
              "default": "",
              "placeholder": "e.g. img, .className, #ItemId",
              "description": "Comma-separated list of selectors to skip in the text extraction"
            },
            {
              "displayName": "Return Array",
              "name": "returnArray",
              "type": "boolean",
              "default": false,
              "description": "Whether to return the values as an array so if multiple ones get found they also get returned separately. If not set all will be returned as a single string."
            }
          ]
        }
      ],
      "displayOptions": {
        "show": {
          "operation": [
            "extractHtmlContent"
          ],
          "@version": [
            1
          ]
        }
      }
    },
    {
      "displayName": "Extraction Values",
      "name": "extractionValues",
      "placeholder": "Add Value",
      "type": "fixedCollection",
      "typeOptions": {
        "multipleValues": true
      },
      "default": {
        "values": [
          {
            "key": "",
            "cssSelector": "",
            "returnValue": "text",
            "returnArray": false
          }
        ]
      },
      "options": [
        {
          "name": "values",
          "displayName": "Values",
          "values": [
            {
              "displayName": "Key",
              "name": "key",
              "type": "string",
              "default": "",
              "description": "The key under which the extracted value should be saved"
            },
            {
              "displayName": "CSS Selector",
              "name": "cssSelector",
              "type": "string",
              "default": "",
              "placeholder": ".price",
              "description": "The CSS selector to use"
            },
            {
              "displayName": "Return Value",
              "name": "returnValue",
              "type": "options",
              "options": [
                {
                  "name": "Attribute",
                  "value": "attribute",
                  "description": "Get an attribute value like \"class\" from an element"
                },
                {
                  "name": "HTML",
                  "value": "html",
                  "description": "Get the HTML the element contains"
                },
                {
                  "name": "Text",
                  "value": "text",
                  "description": "Get only the text content of the element"
                },
                {
                  "name": "Value",
                  "value": "value",
                  "description": "Get value of an input, select or textarea"
                }
              ],
              "default": "text",
              "description": "What kind of data should be returned"
            },
            {
              "displayName": "Attribute",
              "name": "attribute",
              "type": "string",
              "displayOptions": {
                "show": {
                  "returnValue": [
                    "attribute"
                  ]
                }
              },
              "default": "",
              "placeholder": "class",
              "description": "The name of the attribute to return the value off"
            },
            {
              "displayName": "Skip Selectors",
              "name": "skipSelectors",
              "type": "string",
              "displayOptions": {
                "show": {
                  "returnValue": [
                    "text"
                  ],
                  "@version": [
                    {
                      "_cnd": {
                        "gt": 1.1
                      }
                    }
                  ]
                }
              },
              "default": "",
              "placeholder": "e.g. img, .className, #ItemId",
              "description": "Comma-separated list of selectors to skip in the text extraction"
            },
            {
              "displayName": "Return Array",
              "name": "returnArray",
              "type": "boolean",
              "default": false,
              "description": "Whether to return the values as an array so if multiple ones get found they also get returned separately. If not set all will be returned as a single string."
            }
          ]
        }
      ],
      "displayOptions": {
        "show": {
          "operation": [
            "extractHtmlContent"
          ],
          "@version": [
            {
              "_cnd": {
                "gt": 1
              }
            }
          ]
        }
      }
    },
    {
      "displayName": "Options",
      "name": "options",
      "type": "collection",
      "placeholder": "Add option",
      "default": {},
      "displayOptions": {
        "show": {
          "operation": [
            "extractHtmlContent"
          ]
        }
      },
      "options": [
        {
          "displayName": "Trim Values",
          "name": "trimValues",
          "type": "boolean",
          "default": true,
          "description": "Whether to remove automatically all spaces and newlines from the beginning and end of the values"
        },
        {
          "displayName": "Clean Up Text",
          "name": "cleanUpText",
          "type": "boolean",
          "default": true,
          "description": "Whether to remove leading and trailing whitespaces, line breaks (newlines) and condense multiple consecutive whitespaces into a single space"
        }
      ]
    },
    {
      "displayName": "Options",
      "name": "options",
      "type": "collection",
      "placeholder": "Add option",
      "default": {},
      "displayOptions": {
        "show": {
          "operation": [
            "convertToHtmlTable"
          ]
        }
      },
      "options": [
        {
          "displayName": "Capitalize Headers",
          "name": "capitalize",
          "type": "boolean",
          "default": false,
          "description": "Whether to capitalize the headers"
        },
        {
          "displayName": "Custom Styling",
          "name": "customStyling",
          "type": "boolean",
          "default": false,
          "description": "Whether to use custom styling"
        },
        {
          "displayName": "Caption",
          "name": "caption",
          "type": "string",
          "default": "",
          "description": "Caption to add to the table"
        },
        {
          "displayName": "Table Attributes",
          "name": "tableAttributes",
          "type": "string",
          "default": "",
          "description": "Attributes to attach to the table",
          "placeholder": "e.g. style=\"padding:10px\""
        },
        {
          "displayName": "Header Attributes",
          "name": "headerAttributes",
          "type": "string",
          "default": "",
          "description": "Attributes to attach to the table header",
          "placeholder": "e.g. style=\"padding:10px\""
        },
        {
          "displayName": "Row Attributes",
          "name": "rowAttributes",
          "type": "string",
          "default": "",
          "description": "Attributes to attach to the table row",
          "placeholder": "e.g. style=\"padding:10px\""
        },
        {
          "displayName": "Cell Attributes",
          "name": "cellAttributes",
          "type": "string",
          "default": "",
          "description": "Attributes to attach to the table cell",
          "placeholder": "e.g. style=\"padding:10px\""
        }
      ]
    }
  ],
  "codex": {
    "categories": [
      "Core Nodes"
    ],
    "subcategories": {
      "Core Nodes": [
        "Data Transformation"
      ]
    },
    "alias": [
      "extract",
      "template",
      "table"
    ],
    "resources": {
      "primaryDocumentation": [
        {
          "url": "https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.html/"
        }
      ]
    }
  },
  "iconUrl": {
    "light": "icons/n8n-nodes-base/dist/nodes/Html/html.svg",
    "dark": "icons/n8n-nodes-base/dist/nodes/Html/html.dark.svg"
  },
  "name": "n8n-nodes-base.html"
}