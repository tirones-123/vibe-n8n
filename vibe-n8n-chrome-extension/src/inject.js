/**
 * Script inject√© dans le contexte de la page n8n
 * Acc√®s direct au store Pinia pour importer des workflows complets g√©n√©r√©s par le syst√®me RAG
 */

(function() {
  'use strict';

  console.log('üíâ inject.js (Workflow RAG): Script inject√© CHARG√â !');

  // Attendre que Pinia soit disponible
  let piniaStore = null;
  let workflowStore = null;
  let uiStore = null;

  function initializeStores() {
    console.log('üîç inject.js: Recherche des stores Pinia...');
    
    // Rechercher le store Pinia
    if (window.__pinia || window.$pinia) {
      piniaStore = window.__pinia || window.$pinia;
      console.log('‚úÖ inject.js: Pinia trouv√©:', piniaStore);
      
      // Assurer l'exposition de Pinia sur window
      window.__pinia = piniaStore;
      window.$pinia = piniaStore;
      
      // Acc√©der aux stores n8n
      const stores = piniaStore._s;
      if (stores) {
        console.log('üì¶ inject.js: Stores disponibles:', Array.from(stores.keys()));
        workflowStore = stores.get('workflows');
        uiStore = stores.get('ui');
        
        if (workflowStore) {
          console.log('‚úÖ inject.js: Stores Pinia trouv√©s');
          return true;
        }
      }
    }

    // Alternative: chercher dans Vue
    const app = document.querySelector('#app')?.__vue_app__;
    if (app && app._context && app._context.provides) {
      const pinia = app._context.provides.pinia;
      if (pinia) {
        console.log('‚úÖ inject.js: Pinia trouv√© via Vue:', pinia);
        piniaStore = pinia;
        window.__pinia = pinia;
        window.$pinia = pinia;
        workflowStore = pinia._s.get('workflows');
        uiStore = pinia._s.get('ui');
        
        if (workflowStore) {
          console.log('‚úÖ inject.js: Stores trouv√©s via Vue');
          return true;
        }
      }
    }

    // Nouvelle m√©thode: chercher dans les √©l√©ments Vue mont√©s
    const vueElements = document.querySelectorAll('[data-v-app], #app, .n8n-app');
    for (const el of vueElements) {
      if (el.__vue_app__) {
        const app = el.__vue_app__;
        console.log('üîç inject.js: App Vue trouv√©e sur √©l√©ment:', el);
        
        // Chercher Pinia dans les provides
        if (app._context?.provides?.pinia) {
          const pinia = app._context.provides.pinia;
          console.log('‚úÖ inject.js: Pinia trouv√© via √©l√©ment Vue');
          piniaStore = pinia;
          window.__pinia = pinia;
          window.$pinia = pinia;
          
          workflowStore = pinia._s.get('workflows');
          uiStore = pinia._s.get('ui');
          
          if (workflowStore) {
            console.log('‚úÖ inject.js: Stores trouv√©s !');
            return true;
          }
        }
        
        // Chercher dans l'instance globale
        if (app.config?.globalProperties?.$pinia) {
          const pinia = app.config.globalProperties.$pinia;
          console.log('‚úÖ inject.js: Pinia trouv√© via globalProperties');
          piniaStore = pinia;
          window.__pinia = pinia;
          window.$pinia = pinia;
          
          workflowStore = pinia._s.get('workflows');
          uiStore = pinia._s.get('ui');
          
          if (workflowStore) {
            console.log('‚úÖ inject.js: Stores trouv√©s !');
            return true;
          }
        }
      }
      
      // Chercher dans les propri√©t√©s Vue 2/3
      if (el._vnode?.appContext?.provides?.pinia) {
        const pinia = el._vnode.appContext.provides.pinia;
        console.log('‚úÖ inject.js: Pinia trouv√© via vnode');
        piniaStore = pinia;
        window.__pinia = pinia;
        window.$pinia = pinia;
        
        workflowStore = pinia._s.get('workflows');
        uiStore = pinia._s.get('ui');
        
        if (workflowStore) {
          console.log('‚úÖ inject.js: Stores trouv√©s !');
          return true;
        }
      }
    }

    console.log('‚ùå inject.js: Stores non trouv√©s');
    return false;
  }

  // Attendre un peu avant de commencer la recherche (n8n charge de mani√®re asynchrone)
  setTimeout(() => {
    // R√©essayer jusqu'√† ce que les stores soient disponibles
    const initInterval = setInterval(() => {
      if (initializeStores()) {
        clearInterval(initInterval);
        setupMessageListener();
      }
    }, 1000);

    // Timeout apr√®s 30 secondes
    setTimeout(() => {
      clearInterval(initInterval);
      if (!workflowStore) {
        console.warn('n8n AI Assistant (Workflow RAG): Impossible de trouver les stores Pinia apr√®s 30 secondes');
      }
    }, 30000);
  }, 2000);

  // √âcouter les messages du content script
  function setupMessageListener() {
    console.log('üéß inject.js: Listeners configur√©s pour workflow RAG');
    
    // Signaler que le script est pr√™t
    window.postMessage({ type: 'INJECT_SCRIPT_READY' }, '*');
    
    window.addEventListener('message', async (event) => {
      if (event.source !== window) return;

      console.log('üì® inject.js: Message re√ßu:', event.data);

      switch (event.data.type) {
        case 'PING_INJECT_SCRIPT':
          console.log('üèì inject.js: PONG re√ßu, je r√©ponds !');
          window.postMessage({ 
            type: 'INJECT_SCRIPT_READY',
            stores: {
              workflowStore: !!workflowStore,
              uiStore: !!uiStore
            }
          }, '*');
          break;

        case 'GET_CURRENT_WORKFLOW':
          console.log('üìã inject.js: R√©cup√©ration du workflow actuel');
          getCurrentWorkflowData();
          break;

        case 'IMPORT_WORKFLOW':
          console.log('üì• inject.js: Import workflow complet');
          importCompleteWorkflow(event.data.workflow, event.data.isImprovement);
          break;
      }
    });
  }

  // Fonction utilitaire pour nettoyer les objets non-s√©rialisables
  function cleanForSerialization(obj) {
    if (obj === null || obj === undefined) return obj;
    if (typeof obj !== 'object') return obj;
    
    if (Array.isArray(obj)) {
      return obj.map(item => cleanForSerialization(item));
    }
    
    const cleaned = {};
    for (const [key, value] of Object.entries(obj)) {
      try {
        if (value === null || value === undefined) {
          cleaned[key] = value;
        } else if (typeof value === 'function') {
          // Ignorer les fonctions
          continue;
        } else if (typeof value === 'object') {
          // Test de s√©rialisation
          JSON.stringify(value);
          cleaned[key] = cleanForSerialization(value);
        } else {
          cleaned[key] = value;
        }
      } catch (e) {
        // Si un objet ne peut pas √™tre s√©rialis√©, le remplacer par une description
        console.log(`‚ö†Ô∏è Object non-s√©rialisable: ${key}`, e.message);
        cleaned[key] = `[Non-serializable: ${typeof value}]`;
      }
    }
    return cleaned;
  }

  // Nouveau : R√©cup√©rer les donn√©es du workflow actuel
  function getCurrentWorkflowData() {
    console.log('%cüìã INJECT: getCurrentWorkflowData called', 'background: darkgreen; color: white; padding: 2px 6px;');
    
    if (!workflowStore) {
      console.error('‚ùå INJECT: Store Pinia non disponible');
      window.postMessage({
        type: 'CURRENT_WORKFLOW_RESPONSE',
        workflow: null,
        error: 'Store Pinia non disponible'
      }, '*');
      return;
    }

    try {
      // üìä DETAILED LOGGING - Store analysis
      console.log('%cüîç INJECT: Store analysis', 'background: purple; color: white; padding: 2px 6px;');
      console.log('üè™ workflowStore available:', !!workflowStore);
      console.log('üìä workflowStore.allNodes available:', !!workflowStore.allNodes);
      console.log('üî¢ Raw nodes count:', workflowStore.allNodes?.length || 0);
      console.log('üîó Raw connections available:', !!workflowStore.workflow?.connections);
      console.log('üìù Raw workflow name:', workflowStore.workflow?.name);
      
      // Log des n≈ìuds bruts avant traitement
      const rawNodes = workflowStore.allNodes || [];
      if (rawNodes.length > 0) {
        console.log('üìã Raw nodes before processing:');
        rawNodes.forEach((node, i) => {
          console.log(`  ${i + 1}. "${node.name}" (${node.type}) - ID: ${node.id}`);
          console.log(`      Position:`, node.position);
          console.log(`      Parameters keys:`, node.parameters ? Object.keys(node.parameters) : 'none');
          console.log(`      Credentials keys:`, node.credentials ? Object.keys(node.credentials) : 'none');
        });
      }
      
      console.log('üìã inject.js: R√©cup√©ration workflow, n≈ìuds disponibles:', workflowStore.allNodes?.length || 0);
      
      // R√©cup√©rer tous les n≈ìuds avec leurs d√©tails complets
      const nodes = rawNodes.map(node => {
        console.log(`üîÑ Processing node: ${node.name} (${node.type})`);
        try {
          const processedNode = {
            id: node.id,
            name: node.name,
            type: node.type,
            position: Array.isArray(node.position) ? [...node.position] : [100, 100],
            parameters: cleanForSerialization(node.parameters) || {},
            typeVersion: node.typeVersion || 1,
            disabled: Boolean(node.disabled),
            credentials: cleanForSerialization(node.credentials) || {}
          };
          
          console.log(`  ‚úÖ Node processed successfully:`, {
            id: processedNode.id,
            name: processedNode.name,
            type: processedNode.type,
            position: processedNode.position,
            parametersKeys: Object.keys(processedNode.parameters),
            credentialsKeys: Object.keys(processedNode.credentials)
          });
          
          return processedNode;
        } catch (nodeError) {
          console.log(`‚ö†Ô∏è Erreur s√©rialisation n≈ìud ${node.name}:`, nodeError.message);
          return {
            id: node.id,
            name: node.name,
            type: node.type,
            position: [100, 100],
            parameters: {},
            typeVersion: 1,
            disabled: false,
            credentials: {}
          };
        }
      });

      // R√©cup√©rer les connexions
      const rawConnections = workflowStore.workflow?.connections || {};
      console.log('üîó Raw connections before processing:', rawConnections);
      console.log('üîó Raw connections keys:', Object.keys(rawConnections));
      
      const connections = cleanForSerialization(rawConnections);
      console.log('üîó Processed connections:', connections);

      // R√©cup√©rer les m√©tadonn√©es du workflow
      const workflowData = {
        nodes: nodes,
        connections: connections,
        name: workflowStore.workflow?.name || 'Unnamed Workflow',
        active: Boolean(workflowStore.workflow?.active),
        settings: cleanForSerialization(workflowStore.workflow?.settings) || {},
        id: workflowStore.workflow?.id || null,
        createdAt: workflowStore.workflow?.createdAt || null,
        updatedAt: workflowStore.workflow?.updatedAt || null
      };

      // üìä DETAILED LOGGING - Final workflow data
      console.log('%cüìä INJECT: Final workflow data prepared', 'background: darkblue; color: white; padding: 2px 6px;');
      console.log('üìù Final workflow structure:');
      console.log('  - nodes count:', workflowData.nodes.length);
      console.log('  - connections count:', Object.keys(workflowData.connections).length);
      console.log('  - name:', workflowData.name);
      console.log('  - active:', workflowData.active);
      console.log('  - id:', workflowData.id);
      
      if (workflowData.nodes.length > 0) {
        console.log('üìã Final processed nodes:');
        workflowData.nodes.forEach((node, i) => {
          console.log(`  ${i + 1}. "${node.name}" (${node.type}) - ID: ${node.id}`);
          console.log(`      Position: [${node.position.join(', ')}]`);
          console.log(`      Parameters: ${Object.keys(node.parameters).length} keys`);
          console.log(`      Credentials: ${Object.keys(node.credentials).length} keys`);
        });
      }
      
      if (Object.keys(workflowData.connections).length > 0) {
        console.log('üîó Final processed connections:');
        Object.entries(workflowData.connections).forEach(([source, outputs]) => {
          console.log(`  ${source}:`, outputs);
        });
      }

      console.log('üì§ inject.js: Workflow actuel envoy√©:', {
        nodesCount: nodes.length,
        connectionsCount: Object.keys(connections).length,
        name: workflowData.name
      });

      // Test de s√©rialisation avant envoi
      try {
        const serializedTest = JSON.stringify(workflowData);
        const serializedSize = serializedTest.length;
        console.log('‚úÖ Serialization test passed, size:', serializedSize, 'chars (', (serializedSize / 1024).toFixed(1), 'KB)');
        console.log('üì¶ Serialized data sample (first 500 chars):', serializedTest.substring(0, 500) + '...');
        
        window.postMessage({
          type: 'CURRENT_WORKFLOW_RESPONSE',
          workflow: workflowData
        }, '*');
      } catch (serializeError) {
        console.error('‚ùå Erreur s√©rialisation finale:', serializeError.message);
        console.log('üîß Attempting fallback serialization...');
        
        // Envoi d'une version minimale
        const minimalWorkflow = {
          nodes: nodes.map(n => ({ id: n.id, name: n.name, type: n.type })),
          connections: {},
          name: workflowData.name
        };
        
        try {
          JSON.stringify(minimalWorkflow);
          console.log('‚úÖ Fallback serialization successful');
          window.postMessage({
            type: 'CURRENT_WORKFLOW_RESPONSE',
            workflow: minimalWorkflow
          }, '*');
        } catch (fallbackError) {
          console.error('‚ùå Even fallback serialization failed:', fallbackError.message);
          window.postMessage({
            type: 'CURRENT_WORKFLOW_RESPONSE',
            workflow: null,
            error: `Serialization failed: ${serializeError.message}`
          }, '*');
        }
      }

    } catch (error) {
      console.error('‚ùå inject.js: Erreur r√©cup√©ration workflow:', error);
      console.error('‚ùå Error stack:', error.stack);
      
      // Fallback : au moins compter les n≈ìuds
      try {
        const nodeCount = workflowStore.allNodes?.length || 0;
        console.log('üîÑ Fallback : d√©tect√©', nodeCount, 'n≈ìuds');
        
        if (nodeCount > 0) {
          // Envoyer une version minimale pour indiquer qu'il y a des n≈ìuds
          window.postMessage({
            type: 'CURRENT_WORKFLOW_RESPONSE',
            workflow: {
              nodes: Array.from({ length: nodeCount }, (_, i) => ({
                id: `fallback_${i}`,
                name: `Node ${i + 1}`,
                type: 'unknown'
              })),
              connections: {},
              name: 'Current Workflow'
            }
          }, '*');
        } else {
          window.postMessage({
            type: 'CURRENT_WORKFLOW_RESPONSE',
            workflow: null,
            error: error.message
          }, '*');
        }
      } catch (fallbackError) {
        console.error('‚ùå M√™me le fallback a √©chou√©:', fallbackError.message);
        window.postMessage({
          type: 'CURRENT_WORKFLOW_RESPONSE',
          workflow: null,
          error: error.message
        }, '*');
      }
    }
  }

  // Importer un workflow complet g√©n√©r√© par le syst√®me RAG
  async function importCompleteWorkflow(workflowData, isImprovement = false) {
    if (!workflowStore) {
      window.postMessage({
        type: 'IMPORT_ERROR',
        error: 'Store Pinia non disponible'
      }, '*');
      return;
    }

    try {
      console.log('üîÑ Import du workflow RAG:', workflowData);
      console.log('üîÑ Mode d\'import:', isImprovement ? 'am√©lioration (suppression ancien)' : 'nouveau workflow');

      // Effacer le workflow actuel
      const currentNodes = [...workflowStore.allNodes];
      if (currentNodes.length > 0) {
        console.log(`üóëÔ∏è Suppression de ${currentNodes.length} n≈ìuds existants...`);
        if (isImprovement) {
          console.log('üìù N≈ìuds supprim√©s:', currentNodes.map(n => `${n.name} (${n.type})`));
        }
        
        // M√©thode 1: Essayer removeNode pour chaque n≈ìud
        for (const node of currentNodes) {
          try {
            workflowStore.removeNode(node.id);
          } catch (e) {
            console.log(`‚ö†Ô∏è removeNode √©chou√© pour ${node.name}:`, e.message);
          }
        }
        
        // M√©thode 2: Vider directement le state du workflow (plus agressif)
        try {
          workflowStore.$patch({
            workflow: {
              ...workflowStore.workflow,
              nodes: [],
              connections: {}
            }
          });
          console.log('üßπ Workflow vid√© via $patch');
        } catch (patchError) {
          console.log('‚ö†Ô∏è $patch √©chou√©:', patchError.message);
        }
        
        // M√©thode 3: Si une m√©thode clearWorkflow existe
        if (typeof workflowStore.clearWorkflow === 'function') {
          try {
            workflowStore.clearWorkflow();
            console.log('üßπ Workflow vid√© via clearWorkflow');
          } catch (clearError) {
            console.log('‚ö†Ô∏è clearWorkflow √©chou√©:', clearError.message);
          }
        }
        
        // M√©thode 4: R√©initialisation compl√®te du workflow si m√©thode existe
        if (typeof workflowStore.resetWorkflow === 'function') {
          try {
            workflowStore.resetWorkflow();
            console.log('üßπ Workflow r√©initialis√© via resetWorkflow');
          } catch (resetError) {
            console.log('‚ö†Ô∏è resetWorkflow √©chou√©:', resetError.message);
          }
        }
        
        // V√©rification post-suppression
        const remainingNodes = workflowStore.allNodes;
        if (remainingNodes.length > 0) {
          console.warn(`‚ö†Ô∏è ${remainingNodes.length} n≈ìuds toujours pr√©sents apr√®s suppression:`, remainingNodes.map(n => n.name));
          
          // Derni√®re tentative: suppression force via state manipulation
          try {
            // Acc√®s direct au state interne
            const state = workflowStore.$state;
            if (state.workflow) {
              state.workflow.nodes = [];
              state.workflow.connections = {};
              console.log('üßπ Suppression forc√©e via state direct');
            }
          } catch (stateError) {
            console.log('‚ö†Ô∏è Suppression √©tat direct √©chou√©:', stateError.message);
          }
        } else {
          console.log('‚úÖ Workflow pr√©c√©dent supprim√© avec succ√®s');
        }
      } else {
        console.log('üìã Aucun n≈ìud √† supprimer (workflow vide)');
      }

      // Mapper les noms vers les IDs pour les connexions
      const nameToIdMap = {};

      // Importer les nouveaux n≈ìuds
      if (workflowData.nodes && Array.isArray(workflowData.nodes)) {
        for (const node of workflowData.nodes) {
          const nodeId = node.id || `node_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
          
          // Stocker le mapping nom -> id ET id -> id
          if (node.name) {
            nameToIdMap[node.name] = nodeId;
          }
          if (node.id) {
            nameToIdMap[node.id] = nodeId;
          }
          
          console.log(`üìù N≈ìud ajout√©: ${node.name} (${nodeId})`);
          
          // Conserver toutes les propri√©t√©s du n≈ìud g√©n√©r√© afin de ne rien perdre (notes, couleur, etc.)
          const sanitizedNode = cleanForSerialization({
            ...node,
            id: nodeId // garantir un ID d√©fini
          });

          workflowStore.addNode(sanitizedNode);
        }
      }

      console.log('üó∫Ô∏è Mapping nom->ID:', nameToIdMap);

      // Appliquer directement l'objet "connections" complet fourni par l'IA
      if (workflowData.connections && typeof workflowData.connections === 'object') {
        workflowStore.$patch({
          workflow: {
            ...workflowStore.workflow,
            connections: cleanForSerialization(workflowData.connections)
          }
        });
        console.log('‚úÖ Connexions import√©es via patch global');
      }

      // D√©finir le nom du workflow si fourni
      if (workflowData.name) {
        workflowStore.$patch({
          workflow: {
            ...workflowStore.workflow,
            name: workflowData.name
          }
        });
      }

      // Animation de succ√®s
      setTimeout(() => {
        const nodeElements = document.querySelectorAll('[data-node-name], .node');
        nodeElements.forEach(el => {
          el.style.animation = 'fadeIn 0.5s ease-out';
        });
      }, 100);

      const nodeCount = workflowData.nodes?.length || 0;
      const connectionCount = Object.values(workflowData.connections || {})
        .reduce((total, outputs) => {
          if (outputs.main && Array.isArray(outputs.main)) {
            return total + outputs.main.reduce((sum, conns) => sum + (conns?.length || 0), 0);
          }
          return total;
        }, 0);

      const importMessage = isImprovement ? 
        `‚úÖ Workflow am√©lior√© avec succ√®s: ${nodeCount} n≈ìuds, ${connectionCount} connexions` :
        `‚úÖ Import workflow RAG termin√©: ${nodeCount} n≈ìuds, ${connectionCount} connexions`;
      
      console.log(importMessage);
      
      window.postMessage({
        type: 'IMPORT_SUCCESS',
        message: isImprovement ? 
          `Workflow am√©lior√© avec succ√®s: ${nodeCount} n≈ìuds, ${connectionCount} connexions` :
          `Workflow RAG import√© avec succ√®s: ${nodeCount} n≈ìuds, ${connectionCount} connexions`
      }, '*');

    } catch (error) {
      console.error('‚ùå Erreur import workflow RAG:', error);
      window.postMessage({
        type: 'IMPORT_ERROR',
        error: error.message
      }, '*');
    }
  }

  // Ajouter les styles d'animation
  const style = document.createElement('style');
  style.textContent = `
    @keyframes fadeIn {
      0% { opacity: 0; transform: scale(0.9); }
      100% { opacity: 1; transform: scale(1); }
    }
    
    .workflow-rag-imported {
      animation: fadeIn 0.5s ease-out;
      box-shadow: 0 0 20px rgba(34, 197, 94, 0.6) !important;
    }
  `;
  document.head.appendChild(style);

})(); 