#!/usr/bin/env node

/**
 * Analyse la taille des outils MCP et propose des optimisations
 */

import { listTools } from './utils/mcpClient.js';

async function analyzeMCPToolsSize() {
  console.log('üîç Analyse de la taille des outils MCP...\n');
  
  try {
    // R√©cup√©rer tous les outils MCP
    const result = await listTools();
    const tools = result?.tools || [];
    
    console.log(`üìä Nombre total d'outils MCP: ${tools.length}`);
    
    // Analyser chaque outil
    let totalSize = 0;
    const toolSizes = [];
    
    for (const tool of tools) {
      const toolData = {
        name: tool.name,
        description: tool.description,
        input_schema: tool.inputSchema,
      };
      
      const toolJson = JSON.stringify(toolData);
      const toolSize = Buffer.byteLength(toolJson, 'utf8');
      totalSize += toolSize;
      
      toolSizes.push({
        name: tool.name,
        size: toolSize,
        sizeKB: (toolSize / 1024).toFixed(2),
        description: tool.description?.substring(0, 100) + '...'
      });
    }
    
    // Trier par taille d√©croissante
    toolSizes.sort((a, b) => b.size - a.size);
    
    console.log(`\nüìè Taille totale des outils MCP: ${(totalSize / 1024).toFixed(2)} KB`);
    console.log(`üìè Taille moyenne par outil: ${(totalSize / tools.length / 1024).toFixed(2)} KB`);
    
    // Estimer les tokens (approximation: 1 token ‚âà 4 caract√®res)
    const estimatedTokens = Math.ceil(totalSize / 4);
    console.log(`üéØ Tokens estim√©s: ~${estimatedTokens.toLocaleString()}`);
    
    console.log('\nüîù Top 10 des outils les plus volumineux:');
    console.log('‚îÄ'.repeat(80));
    toolSizes.slice(0, 10).forEach((tool, index) => {
      console.log(`${index + 1}. ${tool.name.padEnd(30)} ${tool.sizeKB.padStart(8)} KB`);
      console.log(`   ${tool.description}`);
    });
    
    console.log('\nüí° Analyse des probl√®mes:');
    
    // Probl√®me 1: Tous les outils inject√©s
    console.log('‚ùå PROBL√àME 1: Tous les outils sont inject√©s dans chaque requ√™te');
    console.log(`   - ${tools.length} outils √ó ${(totalSize / tools.length / 1024).toFixed(2)} KB = ${(totalSize / 1024).toFixed(2)} KB par requ√™te`);
    console.log(`   - Cela consomme ~${estimatedTokens.toLocaleString()} tokens avant m√™me le prompt utilisateur`);
    
    // Probl√®me 2: Sch√©mas d√©taill√©s
    console.log('\n‚ùå PROBL√àME 2: Sch√©mas input_schema tr√®s d√©taill√©s');
    const bigSchemas = toolSizes.filter(t => t.size > 2048); // > 2KB
    console.log(`   - ${bigSchemas.length} outils ont des sch√©mas > 2KB`);
    console.log(`   - Les plus gros: ${bigSchemas.slice(0, 3).map(t => `${t.name} (${t.sizeKB}KB)`).join(', ')}`);
    
    console.log('\nüîß SOLUTIONS PROPOS√âES:');
    
    console.log('\n‚úÖ SOLUTION 1: Injection s√©lective des outils');
    console.log('   - Ne charger que les outils n√©cessaires selon le prompt');
    console.log('   - Exemple: si prompt mentionne "Slack", charger uniquement les outils Slack');
    console.log('   - R√©duction estim√©e: 80-90%');
    
    console.log('\n‚úÖ SOLUTION 2: Sch√©mas simplifi√©s');
    console.log('   - Garder uniquement les param√®tres essentiels');
    console.log('   - Supprimer les descriptions longues');
    console.log('   - R√©duction estim√©e: 50-70%');
    
    console.log('\n‚úÖ SOLUTION 3: Cache intelligent');
    console.log('   - Charger les outils √† la demande');
    console.log('   - Cacher les outils utilis√©s r√©cemment');
    console.log('   - R√©duction estim√©e: 60-80%');
    
    console.log('\n‚úÖ SOLUTION 4: Outils de base seulement');
    console.log('   - Commencer avec 5-10 outils essentiels');
    console.log('   - Charger les autres √† la demande');
    console.log('   - R√©duction estim√©e: 90-95%');
    
    // Calculer l'impact sur les tokens
    const currentTokenUsage = estimatedTokens;
    const optimizedTokenUsage = Math.ceil(currentTokenUsage * 0.1); // 10% avec optimisation
    const tokenSavings = currentTokenUsage - optimizedTokenUsage;
    
    console.log('\nüìà IMPACT SUR LES TOKENS:');
    console.log(`   - Actuellement: ~${currentTokenUsage.toLocaleString()} tokens par requ√™te`);
    console.log(`   - Avec optimisation: ~${optimizedTokenUsage.toLocaleString()} tokens par requ√™te`);
    console.log(`   - √âconomie: ${tokenSavings.toLocaleString()} tokens (${((tokenSavings / currentTokenUsage) * 100).toFixed(1)}%)`);
    
    console.log('\nüéØ RECOMMANDATION IMM√âDIATE:');
    console.log('   1. Impl√©menter la SOLUTION 4 (outils de base seulement)');
    console.log('   2. Ajouter un m√©canisme de chargement √† la demande');
    console.log('   3. Surveiller l\'usage des tokens dans les logs');
    
    return {
      totalTools: tools.length,
      totalSizeKB: totalSize / 1024,
      estimatedTokens,
      toolSizes,
      recommendations: [
        'Injection s√©lective des outils',
        'Sch√©mas simplifi√©s',
        'Cache intelligent',
        'Outils de base seulement'
      ]
    };
    
  } catch (error) {
    console.error('‚ùå Erreur lors de l\'analyse:', error.message);
    console.error('üí° Assurez-vous que le serveur MCP est d√©marr√©');
    return null;
  }
}

// Ex√©cuter l'analyse
if (import.meta.url === `file://${process.argv[1]}`) {
  analyzeMCPToolsSize().then(result => {
    if (result) {
      console.log('\n‚úÖ Analyse termin√©e avec succ√®s');
      process.exit(0);
    } else {
      console.log('\n‚ùå Analyse √©chou√©e');
      process.exit(1);
    }
  });
}

export { analyzeMCPToolsSize }; 