{
  "displayName": "Switch",
  "icon": "fa:map-signs",
  "iconColor": "light-blue",
  "group": [
    "transform"
  ],
  "description": "Route items depending on defined expression or rules",
  "defaultVersion": 3.2,
  "subtitle": "=mode: {{(function capitalize(str) {\n  if (!str) return str;\n  const chars = str.split(\"\");\n  chars[0] = chars[0].toUpperCase();\n  return chars.join(\"\");\n})($parameter[\"mode\"])}}",
  "version": [
    3,
    3.1,
    3.2
  ],
  "defaults": {
    "name": "Switch",
    "color": "#506000"
  },
  "inputs": [
    "main"
  ],
  "outputs": "={{((parameters) => {\n  const mode = parameters.mode;\n  if (mode === \"expression\") {\n    return Array.from({ length: parameters.numberOutputs }, (_, i) => ({\n      type: \"main\",\n      displayName: i.toString()\n    }));\n  } else {\n    const rules = parameters.rules?.values ?? [];\n    const ruleOutputs = rules.map((rule, index) => {\n      return {\n        type: \"main\",\n        displayName: rule.outputKey || index.toString()\n      };\n    });\n    if (parameters.options?.fallbackOutput === \"extra\") {\n      const renameFallbackOutput = parameters.options?.renameFallbackOutput;\n      ruleOutputs.push({\n        type: \"main\",\n        displayName: renameFallbackOutput || \"Fallback\"\n      });\n    }\n    return ruleOutputs;\n  }\n})($parameter)}}",
  "properties": [
    {
      "displayName": "Mode",
      "name": "mode",
      "type": "options",
      "noDataExpression": true,
      "options": [
        {
          "name": "Rules",
          "value": "rules",
          "description": "Build a matching rule for each output"
        },
        {
          "name": "Expression",
          "value": "expression",
          "description": "Write an expression to return the output index"
        }
      ],
      "default": "rules",
      "description": "How data should be routed"
    },
    {
      "displayName": "Number of Outputs",
      "name": "numberOutputs",
      "type": "number",
      "displayOptions": {
        "show": {
          "mode": [
            "expression"
          ]
        }
      },
      "default": 4,
      "description": "How many outputs to create"
    },
    {
      "displayName": "Output Index",
      "name": "output",
      "type": "number",
      "validateType": "number",
      "hint": "The index to route the item to, starts at 0",
      "displayOptions": {
        "show": {
          "mode": [
            "expression"
          ]
        }
      },
      "default": "={{}}",
      "description": "The output index to send the input item to. Use an expression to calculate which input item should be routed to which output. The expression must return a number."
    },
    {
      "displayName": "Routing Rules",
      "name": "rules",
      "placeholder": "Add Routing Rule",
      "type": "fixedCollection",
      "typeOptions": {
        "multipleValues": true,
        "sortable": true
      },
      "default": {
        "values": [
          {
            "conditions": {
              "options": {
                "caseSensitive": true,
                "leftValue": "",
                "typeValidation": "strict"
              },
              "conditions": [
                {
                  "leftValue": "",
                  "rightValue": "",
                  "operator": {
                    "type": "string",
                    "operation": "equals"
                  }
                }
              ],
              "combinator": "and"
            }
          }
        ]
      },
      "displayOptions": {
        "show": {
          "mode": [
            "rules"
          ]
        }
      },
      "options": [
        {
          "name": "values",
          "displayName": "Values",
          "values": [
            {
              "displayName": "Conditions",
              "name": "conditions",
              "placeholder": "Add Condition",
              "type": "filter",
              "default": {},
              "typeOptions": {
                "multipleValues": false,
                "filter": {
                  "caseSensitive": "={{!$parameter.options.ignoreCase}}",
                  "typeValidation": "={{ ($nodeVersion < 3.1 ? $parameter.options.looseTypeValidation :  $parameter.looseTypeValidation) ? \"loose\" : \"strict\" }}",
                  "version": "={{ $nodeVersion >= 3.2 ? 2 : 1 }}"
                }
              }
            },
            {
              "displayName": "Rename Output",
              "name": "renameOutput",
              "type": "boolean",
              "default": false
            },
            {
              "displayName": "Output Name",
              "name": "outputKey",
              "type": "string",
              "default": "",
              "description": "The label of output to which to send data to if rule matches",
              "displayOptions": {
                "show": {
                  "renameOutput": [
                    true
                  ]
                }
              }
            }
          ]
        }
      ]
    },
    {
      "displayName": "Convert types where required",
      "description": "If the type of an expression doesn't match the type of the comparison, n8n will try to cast the expression to the required type. E.g. for booleans <code>\"false\"</code> or <code>0</code> will be cast to <code>false</code>",
      "name": "looseTypeValidation",
      "type": "boolean",
      "default": false,
      "displayOptions": {
        "show": {
          "@version": [
            {
              "_cnd": {
                "gte": 3.1
              }
            }
          ]
        }
      }
    },
    {
      "displayName": "Options",
      "name": "options",
      "type": "collection",
      "placeholder": "Add option",
      "default": {},
      "displayOptions": {
        "show": {
          "mode": [
            "rules"
          ]
        }
      },
      "options": [
        {
          "displayName": "Fallback Output",
          "name": "fallbackOutput",
          "type": "options",
          "typeOptions": {
            "loadOptionsDependsOn": [
              "rules.values",
              "/rules",
              "/rules.values"
            ],
            "loadOptionsMethod": "getFallbackOutputOptions"
          },
          "default": "none",
          "description": "If no rule matches the item will be sent to this output, by default they will be ignored"
        },
        {
          "displayName": "Ignore Case",
          "description": "Whether to ignore letter case when evaluating conditions",
          "name": "ignoreCase",
          "type": "boolean",
          "default": true
        },
        {
          "displayName": "Convert types where required",
          "description": "If the type of an expression doesn't match the type of the comparison, n8n will try to cast the expression to the required type. E.g. for booleans <code>\"false\"</code> or <code>0</code> will be cast to <code>false</code>",
          "name": "looseTypeValidation",
          "type": "boolean",
          "default": true,
          "displayOptions": {
            "show": {
              "@version": [
                {
                  "_cnd": {
                    "lt": 3.1
                  }
                }
              ]
            }
          }
        },
        {
          "displayName": "Rename Fallback Output",
          "name": "renameFallbackOutput",
          "type": "string",
          "placeholder": "e.g. Fallback",
          "default": "",
          "displayOptions": {
            "show": {
              "fallbackOutput": [
                "extra"
              ]
            }
          }
        },
        {
          "displayName": "Send data to all matching outputs",
          "name": "allMatchingOutputs",
          "type": "boolean",
          "default": false,
          "description": "Whether to send data to all outputs meeting conditions (and not just the first one)"
        }
      ]
    }
  ],
  "codex": {
    "categories": [
      "Core Nodes"
    ],
    "subcategories": {
      "Core Nodes": [
        "Flow"
      ]
    },
    "alias": [
      "Router",
      "If",
      "Path",
      "Filter",
      "Condition",
      "Logic",
      "Branch",
      "Case"
    ],
    "resources": {
      "primaryDocumentation": [
        {
          "url": "https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.switch/"
        }
      ]
    }
  },
  "name": "n8n-nodes-base.switch"
}