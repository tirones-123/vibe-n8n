{
  "displayName": "Merge",
  "group": [
    "transform"
  ],
  "subtitle": "={{$parameter[\"mode\"]}}",
  "description": "Merges data of multiple streams once data from both is available",
  "defaultVersion": 3.2,
  "version": [
    3,
    3.1,
    3.2
  ],
  "defaults": {
    "name": "Merge"
  },
  "inputs": "={{((parameters) => {\n  return Array.from({ length: parameters.numberInputs || 2 }, (_, i) => ({\n    type: \"main\",\n    displayName: `Input ${(i + 1).toString()}`\n  }));\n})($parameter)}}",
  "outputs": [
    "main"
  ],
  "requiredInputs": "={{ $parameter[\"mode\"] === \"chooseBranch\" ? [0, 1] : 1 }}",
  "properties": [
    {
      "displayName": "Mode",
      "name": "mode",
      "type": "options",
      "noDataExpression": true,
      "options": [
        {
          "name": "Append",
          "value": "append",
          "description": "Output items of each input, one after the other"
        },
        {
          "name": "Combine",
          "value": "combine",
          "description": "Merge matching items together"
        },
        {
          "name": "SQL Query",
          "value": "combineBySql",
          "description": "Write a query to do the merge"
        },
        {
          "name": "Choose Branch",
          "value": "chooseBranch",
          "description": "Output data from a specific branch, without modifying it"
        }
      ],
      "default": "append",
      "description": "How input data should be merged"
    },
    {
      "displayName": "Combine By",
      "name": "combineBy",
      "type": "options",
      "noDataExpression": true,
      "options": [
        {
          "name": "Matching Fields",
          "value": "combineByFields",
          "description": "Combine items with the same field values"
        },
        {
          "name": "Position",
          "value": "combineByPosition",
          "description": "Combine items based on their order"
        },
        {
          "name": "All Possible Combinations",
          "value": "combineAll",
          "description": "Every pairing of every two items (cross join)"
        }
      ],
      "default": "combineByFields",
      "description": "How input data should be merged",
      "displayOptions": {
        "show": {
          "mode": [
            "combine"
          ]
        }
      }
    },
    {
      "displayName": "Number of Inputs",
      "name": "numberInputs",
      "type": "options",
      "noDataExpression": true,
      "default": 2,
      "options": [
        {
          "name": "2",
          "value": 2
        },
        {
          "name": "3",
          "value": 3
        },
        {
          "name": "4",
          "value": 4
        },
        {
          "name": "5",
          "value": 5
        },
        {
          "name": "6",
          "value": 6
        },
        {
          "name": "7",
          "value": 7
        },
        {
          "name": "8",
          "value": 8
        },
        {
          "name": "9",
          "value": 9
        },
        {
          "name": "10",
          "value": 10
        }
      ],
      "validateType": "number",
      "description": "The number of data inputs you want to merge. The node waits for all connected inputs to be executed.",
      "displayOptions": {
        "show": {
          "mode": [
            "append"
          ]
        }
      }
    },
    {
      "displayName": "Options",
      "name": "options",
      "type": "collection",
      "placeholder": "Add option",
      "default": {},
      "options": [
        {
          "displayName": "Clash Handling",
          "name": "clashHandling",
          "type": "fixedCollection",
          "default": {
            "values": {
              "resolveClash": "preferLast",
              "mergeMode": "deepMerge",
              "overrideEmpty": false
            }
          },
          "options": [
            {
              "displayName": "Values",
              "name": "values",
              "values": [
                {
                  "displayName": "When Field Values Clash",
                  "name": "resolveClash",
                  "type": "options",
                  "default": "",
                  "typeOptions": {
                    "loadOptionsMethod": "getResolveClashOptions",
                    "loadOptionsDependsOn": [
                      "numberInputs"
                    ]
                  }
                },
                {
                  "displayName": "Merging Nested Fields",
                  "name": "mergeMode",
                  "type": "options",
                  "default": "deepMerge",
                  "options": [
                    {
                      "name": "Deep Merge",
                      "value": "deepMerge",
                      "description": "Merge at every level of nesting"
                    },
                    {
                      "name": "Shallow Merge",
                      "value": "shallowMerge",
                      "description": "Merge at the top level only (all nested fields will come from the same input)"
                    }
                  ],
                  "hint": "How to merge when there are sub-fields below the top-level ones",
                  "displayOptions": {
                    "show": {
                      "resolveClash": [
                        {
                          "_cnd": {
                            "not": "addSuffix"
                          }
                        }
                      ]
                    }
                  }
                },
                {
                  "displayName": "Minimize Empty Fields",
                  "name": "overrideEmpty",
                  "type": "boolean",
                  "default": false,
                  "description": "Whether to override the preferred input version for a field if it is empty and the other version isn't. Here 'empty' means undefined, null or an empty string.",
                  "displayOptions": {
                    "show": {
                      "resolveClash": [
                        {
                          "_cnd": {
                            "not": "addSuffix"
                          }
                        }
                      ]
                    }
                  }
                }
              ]
            }
          ]
        },
        {
          "displayName": "Fuzzy Compare",
          "name": "fuzzyCompare",
          "type": "boolean",
          "default": false,
          "description": "Whether to tolerate small type differences when comparing fields. E.g. the number 3 and the string '3' are treated as the same."
        }
      ],
      "displayOptions": {
        "show": {
          "mode": [
            "combine"
          ],
          "combineBy": [
            "combineAll"
          ]
        }
      }
    },
    {
      "displayName": "Fields To Match Have Different Names",
      "name": "advanced",
      "type": "boolean",
      "default": false,
      "description": "Whether name(s) of field to match are different in input 1 and input 2",
      "displayOptions": {
        "show": {
          "mode": [
            "combine"
          ],
          "combineBy": [
            "combineByFields"
          ]
        }
      }
    },
    {
      "displayName": "Fields to Match",
      "name": "fieldsToMatchString",
      "type": "string",
      "placeholder": "e.g. id, name",
      "default": "",
      "requiresDataPath": "multiple",
      "description": "Specify the fields to use for matching input items",
      "hint": "Drag or type the input field name",
      "displayOptions": {
        "show": {
          "advanced": [
            false
          ],
          "mode": [
            "combine"
          ],
          "combineBy": [
            "combineByFields"
          ]
        }
      }
    },
    {
      "displayName": "Fields to Match",
      "name": "mergeByFields",
      "type": "fixedCollection",
      "placeholder": "Add Fields to Match",
      "default": {
        "values": [
          {
            "field1": "",
            "field2": ""
          }
        ]
      },
      "typeOptions": {
        "multipleValues": true
      },
      "description": "Specify the fields to use for matching input items",
      "displayOptions": {
        "show": {
          "advanced": [
            true
          ],
          "mode": [
            "combine"
          ],
          "combineBy": [
            "combineByFields"
          ]
        }
      },
      "options": [
        {
          "displayName": "Values",
          "name": "values",
          "values": [
            {
              "displayName": "Input 1 Field",
              "name": "field1",
              "type": "string",
              "default": "",
              "placeholder": "e.g. id",
              "hint": "Drag or type the input field name",
              "requiresDataPath": "single"
            },
            {
              "displayName": "Input 2 Field",
              "name": "field2",
              "type": "string",
              "default": "",
              "placeholder": "e.g. id",
              "hint": "Drag or type the input field name",
              "requiresDataPath": "single"
            }
          ]
        }
      ]
    },
    {
      "displayName": "Output Type",
      "name": "joinMode",
      "type": "options",
      "description": "How to select the items to send to output",
      "options": [
        {
          "name": "Keep Matches",
          "value": "keepMatches",
          "description": "Items that match, merged together (inner join)"
        },
        {
          "name": "Keep Non-Matches",
          "value": "keepNonMatches",
          "description": "Items that don't match"
        },
        {
          "name": "Keep Everything",
          "value": "keepEverything",
          "description": "Items that match merged together, plus items that don't match (outer join)"
        },
        {
          "name": "Enrich Input 1",
          "value": "enrichInput1",
          "description": "All of input 1, with data from input 2 added in (left join)"
        },
        {
          "name": "Enrich Input 2",
          "value": "enrichInput2",
          "description": "All of input 2, with data from input 1 added in (right join)"
        }
      ],
      "default": "keepMatches",
      "displayOptions": {
        "show": {
          "mode": [
            "combine"
          ],
          "combineBy": [
            "combineByFields"
          ]
        }
      }
    },
    {
      "displayName": "Output Data From",
      "name": "outputDataFrom",
      "type": "options",
      "options": [
        {
          "name": "Both Inputs Merged Together",
          "value": "both"
        },
        {
          "name": "Input 1",
          "value": "input1"
        },
        {
          "name": "Input 2",
          "value": "input2"
        }
      ],
      "default": "both",
      "displayOptions": {
        "show": {
          "joinMode": [
            "keepMatches"
          ],
          "mode": [
            "combine"
          ],
          "combineBy": [
            "combineByFields"
          ]
        }
      }
    },
    {
      "displayName": "Output Data From",
      "name": "outputDataFrom",
      "type": "options",
      "options": [
        {
          "name": "Both Inputs Appended Together",
          "value": "both"
        },
        {
          "name": "Input 1",
          "value": "input1"
        },
        {
          "name": "Input 2",
          "value": "input2"
        }
      ],
      "default": "both",
      "displayOptions": {
        "show": {
          "joinMode": [
            "keepNonMatches"
          ],
          "mode": [
            "combine"
          ],
          "combineBy": [
            "combineByFields"
          ]
        }
      }
    },
    {
      "displayName": "Options",
      "name": "options",
      "type": "collection",
      "placeholder": "Add option",
      "default": {},
      "options": [
        {
          "displayName": "Clash Handling",
          "name": "clashHandling",
          "type": "fixedCollection",
          "default": {
            "values": {
              "resolveClash": "preferLast",
              "mergeMode": "deepMerge",
              "overrideEmpty": false
            }
          },
          "options": [
            {
              "displayName": "Values",
              "name": "values",
              "values": [
                {
                  "displayName": "When Field Values Clash",
                  "name": "resolveClash",
                  "type": "options",
                  "default": "",
                  "typeOptions": {
                    "loadOptionsMethod": "getResolveClashOptions",
                    "loadOptionsDependsOn": [
                      "numberInputs"
                    ]
                  }
                },
                {
                  "displayName": "Merging Nested Fields",
                  "name": "mergeMode",
                  "type": "options",
                  "default": "deepMerge",
                  "options": [
                    {
                      "name": "Deep Merge",
                      "value": "deepMerge",
                      "description": "Merge at every level of nesting"
                    },
                    {
                      "name": "Shallow Merge",
                      "value": "shallowMerge",
                      "description": "Merge at the top level only (all nested fields will come from the same input)"
                    }
                  ],
                  "hint": "How to merge when there are sub-fields below the top-level ones",
                  "displayOptions": {
                    "show": {
                      "resolveClash": [
                        {
                          "_cnd": {
                            "not": "addSuffix"
                          }
                        }
                      ]
                    }
                  }
                },
                {
                  "displayName": "Minimize Empty Fields",
                  "name": "overrideEmpty",
                  "type": "boolean",
                  "default": false,
                  "description": "Whether to override the preferred input version for a field if it is empty and the other version isn't. Here 'empty' means undefined, null or an empty string.",
                  "displayOptions": {
                    "show": {
                      "resolveClash": [
                        {
                          "_cnd": {
                            "not": "addSuffix"
                          }
                        }
                      ]
                    }
                  }
                }
              ]
            }
          ],
          "displayOptions": {
            "hide": {
              "/joinMode": [
                "keepMatches",
                "keepNonMatches"
              ]
            }
          }
        },
        {
          "displayName": "Clash Handling",
          "name": "clashHandling",
          "type": "fixedCollection",
          "default": {
            "values": {
              "resolveClash": "preferLast",
              "mergeMode": "deepMerge",
              "overrideEmpty": false
            }
          },
          "options": [
            {
              "displayName": "Values",
              "name": "values",
              "values": [
                {
                  "displayName": "When Field Values Clash",
                  "name": "resolveClash",
                  "type": "options",
                  "default": "",
                  "typeOptions": {
                    "loadOptionsMethod": "getResolveClashOptions",
                    "loadOptionsDependsOn": [
                      "numberInputs"
                    ]
                  }
                },
                {
                  "displayName": "Merging Nested Fields",
                  "name": "mergeMode",
                  "type": "options",
                  "default": "deepMerge",
                  "options": [
                    {
                      "name": "Deep Merge",
                      "value": "deepMerge",
                      "description": "Merge at every level of nesting"
                    },
                    {
                      "name": "Shallow Merge",
                      "value": "shallowMerge",
                      "description": "Merge at the top level only (all nested fields will come from the same input)"
                    }
                  ],
                  "hint": "How to merge when there are sub-fields below the top-level ones",
                  "displayOptions": {
                    "show": {
                      "resolveClash": [
                        {
                          "_cnd": {
                            "not": "addSuffix"
                          }
                        }
                      ]
                    }
                  }
                },
                {
                  "displayName": "Minimize Empty Fields",
                  "name": "overrideEmpty",
                  "type": "boolean",
                  "default": false,
                  "description": "Whether to override the preferred input version for a field if it is empty and the other version isn't. Here 'empty' means undefined, null or an empty string.",
                  "displayOptions": {
                    "show": {
                      "resolveClash": [
                        {
                          "_cnd": {
                            "not": "addSuffix"
                          }
                        }
                      ]
                    }
                  }
                }
              ]
            }
          ],
          "displayOptions": {
            "show": {
              "/joinMode": [
                "keepMatches"
              ],
              "/outputDataFrom": [
                "both"
              ]
            }
          }
        },
        {
          "displayName": "Disable Dot Notation",
          "name": "disableDotNotation",
          "type": "boolean",
          "default": false,
          "description": "Whether to disallow referencing child fields using `parent.child` in the field name"
        },
        {
          "displayName": "Fuzzy Compare",
          "name": "fuzzyCompare",
          "type": "boolean",
          "default": false,
          "description": "Whether to tolerate small type differences when comparing fields. E.g. the number 3 and the string '3' are treated as the same."
        },
        {
          "displayName": "Multiple Matches",
          "name": "multipleMatches",
          "type": "options",
          "default": "all",
          "options": [
            {
              "name": "Include All Matches",
              "value": "all",
              "description": "Output multiple items if there are multiple matches"
            },
            {
              "name": "Include First Match Only",
              "value": "first",
              "description": "Only ever output a single item per match"
            }
          ],
          "displayOptions": {
            "show": {
              "/joinMode": [
                "keepMatches"
              ],
              "/outputDataFrom": [
                "both"
              ]
            }
          }
        },
        {
          "displayName": "Multiple Matches",
          "name": "multipleMatches",
          "type": "options",
          "default": "all",
          "options": [
            {
              "name": "Include All Matches",
              "value": "all",
              "description": "Output multiple items if there are multiple matches"
            },
            {
              "name": "Include First Match Only",
              "value": "first",
              "description": "Only ever output a single item per match"
            }
          ],
          "displayOptions": {
            "show": {
              "/joinMode": [
                "enrichInput1",
                "enrichInput2",
                "keepEverything"
              ]
            }
          }
        }
      ],
      "displayOptions": {
        "show": {
          "mode": [
            "combine"
          ],
          "combineBy": [
            "combineByFields"
          ]
        }
      }
    },
    {
      "displayName": "Number of Inputs",
      "name": "numberInputs",
      "type": "options",
      "noDataExpression": true,
      "default": 2,
      "options": [
        {
          "name": "2",
          "value": 2
        },
        {
          "name": "3",
          "value": 3
        },
        {
          "name": "4",
          "value": 4
        },
        {
          "name": "5",
          "value": 5
        },
        {
          "name": "6",
          "value": 6
        },
        {
          "name": "7",
          "value": 7
        },
        {
          "name": "8",
          "value": 8
        },
        {
          "name": "9",
          "value": 9
        },
        {
          "name": "10",
          "value": 10
        }
      ],
      "validateType": "number",
      "description": "The number of data inputs you want to merge. The node waits for all connected inputs to be executed.",
      "displayOptions": {
        "show": {
          "mode": [
            "combineBySql"
          ]
        }
      }
    },
    {
      "displayName": "Query",
      "name": "query",
      "type": "string",
      "default": "SELECT * FROM input1 LEFT JOIN input2 ON input1.name = input2.id",
      "noDataExpression": true,
      "description": "Input data available as tables with corresponding number, e.g. input1, input2",
      "hint": "Supports <a href=\"https://github.com/alasql/alasql/wiki/Supported-SQL-statements\" target=\"_blank\">most</a> of the SQL-99 language",
      "required": true,
      "typeOptions": {
        "rows": 5,
        "editor": "sqlEditor"
      },
      "displayOptions": {
        "show": {
          "mode": [
            "combineBySql"
          ]
        }
      }
    },
    {
      "displayName": "Options",
      "name": "options",
      "type": "collection",
      "placeholder": "Add option",
      "default": {},
      "options": [
        {
          "displayName": "Empty Query Result",
          "name": "emptyQueryResult",
          "type": "options",
          "description": "What to return if the query executed successfully but returned no results",
          "options": [
            {
              "name": "Success",
              "value": "success"
            },
            {
              "name": "Empty Result",
              "value": "empty"
            }
          ],
          "default": "empty"
        }
      ],
      "displayOptions": {
        "show": {
          "@version": [
            3.2
          ],
          "mode": [
            "combineBySql"
          ]
        }
      }
    },
    {
      "displayName": "Number of Inputs",
      "name": "numberInputs",
      "type": "options",
      "noDataExpression": true,
      "default": 2,
      "options": [
        {
          "name": "2",
          "value": 2
        },
        {
          "name": "3",
          "value": 3
        },
        {
          "name": "4",
          "value": 4
        },
        {
          "name": "5",
          "value": 5
        },
        {
          "name": "6",
          "value": 6
        },
        {
          "name": "7",
          "value": 7
        },
        {
          "name": "8",
          "value": 8
        },
        {
          "name": "9",
          "value": 9
        },
        {
          "name": "10",
          "value": 10
        }
      ],
      "validateType": "number",
      "description": "The number of data inputs you want to merge. The node waits for all connected inputs to be executed.",
      "displayOptions": {
        "show": {
          "mode": [
            "combine"
          ],
          "combineBy": [
            "combineByPosition"
          ]
        }
      }
    },
    {
      "displayName": "Options",
      "name": "options",
      "type": "collection",
      "placeholder": "Add option",
      "default": {},
      "options": [
        {
          "displayName": "Clash Handling",
          "name": "clashHandling",
          "type": "fixedCollection",
          "default": {
            "values": {
              "resolveClash": "addSuffix"
            }
          },
          "options": [
            {
              "displayName": "Values",
              "name": "values",
              "values": [
                {
                  "displayName": "When Field Values Clash",
                  "name": "resolveClash",
                  "type": "options",
                  "default": "",
                  "typeOptions": {
                    "loadOptionsMethod": "getResolveClashOptions",
                    "loadOptionsDependsOn": [
                      "numberInputs"
                    ]
                  }
                },
                {
                  "displayName": "Merging Nested Fields",
                  "name": "mergeMode",
                  "type": "options",
                  "default": "deepMerge",
                  "options": [
                    {
                      "name": "Deep Merge",
                      "value": "deepMerge",
                      "description": "Merge at every level of nesting"
                    },
                    {
                      "name": "Shallow Merge",
                      "value": "shallowMerge",
                      "description": "Merge at the top level only (all nested fields will come from the same input)"
                    }
                  ],
                  "hint": "How to merge when there are sub-fields below the top-level ones",
                  "displayOptions": {
                    "show": {
                      "resolveClash": [
                        {
                          "_cnd": {
                            "not": "addSuffix"
                          }
                        }
                      ]
                    }
                  }
                },
                {
                  "displayName": "Minimize Empty Fields",
                  "name": "overrideEmpty",
                  "type": "boolean",
                  "default": false,
                  "description": "Whether to override the preferred input version for a field if it is empty and the other version isn't. Here 'empty' means undefined, null or an empty string.",
                  "displayOptions": {
                    "show": {
                      "resolveClash": [
                        {
                          "_cnd": {
                            "not": "addSuffix"
                          }
                        }
                      ]
                    }
                  }
                }
              ]
            }
          ]
        },
        {
          "displayName": "Include Any Unpaired Items",
          "name": "includeUnpaired",
          "type": "boolean",
          "default": false,
          "description": "Whether unpaired items should be included in the result when there are differing numbers of items among the inputs"
        }
      ],
      "displayOptions": {
        "show": {
          "mode": [
            "combine"
          ],
          "combineBy": [
            "combineByPosition"
          ]
        }
      }
    },
    {
      "displayName": "Number of Inputs",
      "name": "numberInputs",
      "type": "options",
      "noDataExpression": true,
      "default": 2,
      "options": [
        {
          "name": "2",
          "value": 2
        },
        {
          "name": "3",
          "value": 3
        },
        {
          "name": "4",
          "value": 4
        },
        {
          "name": "5",
          "value": 5
        },
        {
          "name": "6",
          "value": 6
        },
        {
          "name": "7",
          "value": 7
        },
        {
          "name": "8",
          "value": 8
        },
        {
          "name": "9",
          "value": 9
        },
        {
          "name": "10",
          "value": 10
        }
      ],
      "validateType": "number",
      "description": "The number of data inputs you want to merge. The node waits for all connected inputs to be executed.",
      "displayOptions": {
        "show": {
          "mode": [
            "chooseBranch"
          ]
        }
      }
    },
    {
      "displayName": "Output Type",
      "name": "chooseBranchMode",
      "type": "options",
      "options": [
        {
          "name": "Wait for All Inputs to Arrive",
          "value": "waitForAll"
        }
      ],
      "default": "waitForAll",
      "displayOptions": {
        "show": {
          "mode": [
            "chooseBranch"
          ]
        }
      }
    },
    {
      "displayName": "Output",
      "name": "output",
      "type": "options",
      "options": [
        {
          "name": "Data of Specified Input",
          "value": "specifiedInput"
        },
        {
          "name": "A Single, Empty Item",
          "value": "empty"
        }
      ],
      "default": "specifiedInput",
      "displayOptions": {
        "show": {
          "chooseBranchMode": [
            "waitForAll"
          ],
          "mode": [
            "chooseBranch"
          ]
        }
      }
    },
    {
      "displayName": "Use Data of Input",
      "name": "useDataOfInput",
      "type": "options",
      "default": 1,
      "displayOptions": {
        "show": {
          "output": [
            "specifiedInput"
          ],
          "mode": [
            "chooseBranch"
          ]
        }
      },
      "typeOptions": {
        "minValue": 1,
        "loadOptionsMethod": "getInputs",
        "loadOptionsDependsOn": [
          "numberInputs"
        ]
      },
      "description": "The number of the input to use data of",
      "validateType": "number"
    }
  ],
  "iconUrl": "icons/n8n-nodes-base/dist/nodes/Merge/merge.svg",
  "codex": {
    "categories": [
      "Core Nodes"
    ],
    "subcategories": {
      "Core Nodes": [
        "Flow",
        "Data Transformation"
      ]
    },
    "alias": [
      "Join",
      "Concatenate",
      "Wait"
    ],
    "resources": {
      "primaryDocumentation": [
        {
          "url": "https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.merge/"
        }
      ]
    }
  },
  "name": "n8n-nodes-base.merge"
}