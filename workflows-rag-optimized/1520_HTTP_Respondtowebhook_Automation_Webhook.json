{
  "id": "Iz8TMdlc6JhaKkd9",
  "meta": {
    "instanceId": "<UUID-chain>"
  },
  "name": "YouTube Video Transcriber",
  "tags": [],
  "nodes": [
    {
      "id": "a4e2f554-ebae-41df-912a-0d1081fa1736",
      "name": "When chat message received",
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "position": [
        -100,
        -60
      ],
      "webhookId": "70129cbe-1a05-495f-bd92-18d36c1bc260",
      "parameters": {
        "public": true,
        "options": {
          "title": "Youtube Video Transcriber 🚀",
          "subtitle": "Have a great transcription!  📖",
          "inputPlaceholder": "Insert a URL of a YouTube video.  💻"
        },
        "initialMessages": "Give me a URL of a video from YouTube to start! 👍"
      },
      "typeVersion": 1.1
    },
    {
      "id": "34b2b12e-0eb5-4f59-bd30-e7b595d06b8c",
      "name": "Code",
      "type": "n8n-nodes-base.code",
      "position": [
        280,
        -60
      ],
      "parameters": {
        "language": "python",
        "pythonCode": "import re\n\ndef youtube_video_url_validatior(video_url) -> str:\n  try:\n    if not video_url:\n      return {\"text\": 'URL from the video is required.', \"is_valid\": False}\n    \n    video_url: str = re.sub(r\"\\s{2,}\", \" \", video_url.strip())\n    \n    if not video_url:\n      return {\"text\": 'URL from the video is required.', \"is_valid\": False}\n    \n    if len(video_url) < 25:\n      return {\"text\": 'URL is too short to be a valid YouTube URL.', \"is_valid\": False}\n    \n    # if not re.match(r'^[A-Za-z0-9:/._?&=-]+$', video_url):\n    #   return {\"text\": 'URL contains invalid characters.', \"is_valid\": False}\n    \n    is_valid: bool = False\n    \n    for pattern in [\n        r'^https?://(?:www\\.)?youtube\\.com/watch\\?v=[\\w-]{11}',\n        r'^https?://youtu\\.be/[\\w-]{11}',\n        r'^https?://(?:www\\.)?youtube\\.com/embed/[\\w-]{11}',\n        r'^https?://(?:www\\.)?youtube\\.com/v/[\\w-]{11}',\n    ]:\n        if re.match(pattern, video_url):\n          is_valid = True\n          \n          break\n    \n    if not is_valid:\n      return {\"text\": 'Invalid YouTube URL format.', \"is_valid\": False}\n      \n    video_url_id: str | None = re.search(r'(?:v=|youtu\\.be/|embed/|v/)([\\w-]{11})', video_url).group(1)\n    \n    if not video_url_id or not re.match(r'^[\\w-]{11}$', video_url_id):\n      return {\"text\": 'Invalid YouTube video ID.', \"is_valid\": False}\n    \n    return {\"text\": video_url, \"is_valid\": True}\n  except Exception as ex:\n    raise ex\n\nreturn youtube_video_url_validatior(_input.first().json.chatInput)"
      },
      "typeVersion": 2
    },
    {
      "id": "712cbf28-df12-44fc-b54a-bc21e13e55e7",
      "name": "If",
      "type": "n8n-nodes-base.if",
      "position": [
        600,
        -240
      ],
      "parameters": {
        "options": {},
        "conditions": {
          "options": {
            "version": 2,
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "loose"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "b8927a53-2755-4364-84b1-5340c5c31af5",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              },
              "leftValue": "={{ $json.is_valid }}",
              "rightValue": ""
            }
          ]
        },
        "looseTypeValidation": true
      },
      "typeVersion": 2.2
    },
    {
      "id": "be9e1903-25bc-4f1b-8793-5e657205dd5d",
      "name": "Respond to Webhook - Chat Message",
      "type": "n8n-nodes-base.respondToWebhook",
      "position": [
        600,
        60
      ],
      "parameters": {
        "options": {},
        "respondWith": "text",
        "responseBody": "={{ $json.text }}"
      },
      "retryOnFail": true,
      "typeVersion": 1.1
    },
    {
      "id": "2ea0b992-231b-4f6d-9f6f-9f488d266cfb",
      "name": "Edit Fields - Respond to Chat Message 2",
      "type": "n8n-nodes-base.set",
      "position": [
        1000,
        180
      ],
      "parameters": {
        "options": {},
        "assignments": {
          "assignments": [
            {
              "id": "66270798-60eb-4ab8-8572-ab957474e260",
              "name": "text",
              "type": "string",
              "value": "={{ $json.error }} - {{ $json.message }}"
            }
          ]
        }
      },
      "typeVersion": 3.4
    },
    {
      "id": "9846e903-015a-4111-b582-572d473fe4d3",
      "name": "Edit Fields - Respond to Chat Message 3",
      "type": "n8n-nodes-base.set",
      "position": [
        1900,
        -320
      ],
      "parameters": {
        "options": {},
        "assignments": {
          "assignments": [
            {
              "id": "97e0c175-8060-43da-9761-5c25d660c7ed",
              "name": "text",
              "type": "string",
              "value": "={{ $json.message.content }}"
            }
          ]
        }
      },
      "typeVersion": 3.4
    },
    {
      "id": "775e067c-3518-4c64-a939-5f9b9b435b3c",
      "name": "Edit Fields - Respond to Chat Message 4",
      "type": "n8n-nodes-base.set",
      "position": [
        1900,
        100
      ],
      "parameters": {
        "options": {},
        "assignments": {
          "assignments": [
            {
              "id": "66270798-60eb-4ab8-8572-ab957474e260",
              "name": "text",
              "type": "string",
              "value": "=Something went wrong with the data structuring."
            }
          ]
        }
      },
      "typeVersion": 3.4
    },
    {
      "id": "91e22fcc-79b8-48d2-ba6e-bfb699ed9a07",
      "name": "HTTP Request",
      "type": "n8n-nodes-base.httpRequest",
      "onError": "continueErrorOutput",
      "position": [
        1000,
        -100
      ],
      "parameters": {
        "url": "=https://api.supadata.ai/v1/youtube/transcript?url={{ $json.text }}&text=true&lang=pt",
        "options": {
          "timeout": 300000
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "x-api-key",
              "value": "SUPADATA_API_KEY"
            }
          ]
        }
      },
      "executeOnce": false,
      "notesInFlow": false,
      "retryOnFail": false,
      "typeVersion": 4.2,
      "alwaysOutputData": false
    },
    {
      "id": "3fce199e-2e95-40a8-a78e-20a25c3f4300",
      "name": "OpenAI",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "onError": "continueErrorOutput",
      "position": [
        1460,
        20
      ],
      "parameters": {
        "modelId": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4o-mini-2024-07-18",
          "cachedResultName": "GPT-4O-MINI-2024-07-18"
        },
        "options": {},
        "messages": {
          "values": [
            {
              "role": "system",
              "content": "You are an expert in grammar corrections and textual structuring.\n\nCorrect the classification of the provided text, adding commas, periods, question marks and other symbols necessary for natural and consistent reading. Do not change any words, just adjust the punctuation according to the grammatical rules and context.\n\nOrganize your content using markdown, structuring it with titles, subtitles, lists or other protected elements to clearly highlight the topics and information captured. Leave it in Portuguese and remember to always maintain the original formatting.\n\nTextual organization should always be a priority according to the content of the text, as well as the appropriate title, which must make sense."
            },
            {
              "content": "={{ $json.content }}"
            }
          ]
        }
      },
      "credentials": {
        "openAiApi": {
          "id": "<openAiApi-id>",
          "name": "OpenAi account"
        }
      },
      "retryOnFail": true,
      "typeVersion": 1.8
    }
  ],
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "connections": {
    "If": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Respond to Webhook - Chat Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI": {
      "main": [
        [
          {
            "node": "Edit Fields - Respond to Chat Message 3",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Edit Fields - Respond to Chat Message 4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "OpenAI",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Edit Fields - Respond to Chat Message 2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When chat message received": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  }
}