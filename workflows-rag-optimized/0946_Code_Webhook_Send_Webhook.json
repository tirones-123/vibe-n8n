{
  "id": "3tJcVzt2OqeyjfnH",
  "meta": {
    "instanceId": "<UUID-chain>"
  },
  "name": "Analyze_email_headers_for_IPs_and_spoofing__3",
  "tags": [
    {
      "id": "GCHVocImoXoEVnzP",
      "name": "🛠️ In progress",
      "createdAt": "2023-10-31T02:17:21.618Z",
      "updatedAt": "2023-10-31T02:17:21.618Z"
    },
    {
      "id": "QPJKatvLSxxtrE8U",
      "name": "Secops",
      "createdAt": "2023-10-31T02:15:11.396Z",
      "updatedAt": "2023-10-31T02:15:11.396Z"
    }
  ],
  "nodes": [
    {
      "id": "a2dca82d-f2b4-41f7-942a-2713a5ae012e",
      "name": "Receive Headers",
      "type": "n8n-nodes-base.webhook",
      "position": [
        -320,
        740
      ],
      "webhookId": "1bde44ab-1360-48b3-9b2f-260a82629bfa",
      "parameters": {
        "path": "90e9e395-1d40-4575-b2a0-fbf52c534167",
        "options": {},
        "httpMethod": "POST",
        "responseMode": "responseNode"
      },
      "typeVersion": 1
    },
    {
      "id": "2464403b-5cb9-4090-b923-912bb8af673a",
      "name": "Fraud Score",
      "type": "n8n-nodes-base.code",
      "position": [
        1340,
        560
      ],
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "let recentSpamActivity = \"undefined\";\nlet ipSenderReputation = \"undefined\";\n\ntry {\n  if ($('IP Quality Score')) {\n    const fraudScore = $('IP Quality Score').item.json.fraud_score;\n\n    recentSpamActivity = \"Not associated with recent spam activity\";\n    \n    if( fraudScore >= 85 ) {\n      recentSpamActivity = \"Identified spam in the past 24-48 hours\";\n    } else if( fraudScore >= 75 ) {\n      recentSpamActivity = \"Identified spam in the past month\";\n    }\n\n    if(!fraudScore) recentSpamActivity = \"unknown\";\n    \n    ipSenderReputation = \"unknown\";\n    \n    if( fraudScore >= 85 ) {\n      ipSenderReputation = \"Bad\";\n    } else if( fraudScore >= 75 ) {\n      ipSenderReputation = \"Poor\";  \n    } else if( fraudScore >= 50 ) {\n      ipSenderReputation = \"Suspicious\";  \n    } else if( fraudScore >= 11 ) {\n      ipSenderReputation = \"OK\";  \n    } else if( fraudScore <= 10 ) {\n      ipSenderReputation = \"Good\";  \n    }\n  }\n} catch (error) {\n  return {\n    \"recent_spam_activity\": recentSpamActivity,\n    \"ip_sender_reputation\": ipSenderReputation\n  };\n}\n\nreturn {\n  \"recent_spam_activity\": recentSpamActivity,\n  \"ip_sender_reputation\": ipSenderReputation\n};"
      },
      "typeVersion": 2
    },
    {
      "id": "70e3e88a-001a-40fc-a771-ace7696f54eb",
      "name": "Respond to Webhook",
      "type": "n8n-nodes-base.respondToWebhook",
      "position": [
        2680,
        760
      ],
      "parameters": {
        "options": {
          "responseCode": 200
        },
        "respondWith": "text",
        "responseBody": "={{ $json.result }}"
      },
      "typeVersion": 1
    },
    {
      "id": "2e8ead40-a97a-4c7e-953c-33546b83eaf6",
      "name": "Explode Email Header",
      "type": "n8n-nodes-base.code",
      "position": [
        80,
        740
      ],
      "parameters": {
        "jsCode": "// Takes the Header string and splits it into various items for analysis.\nlet returnArray = [];\n\nfor (const item of $input.all()) {\n  const headerStr = item.json.header;\n  const headerLines = headerStr.split('\\n');\n    const headerObj = {};\n\n    let currentKey = null;\n    let currentValue = '';\n\n    headerLines.forEach((line) => {\n        const match = line.match(/^([\\w-]+):\\s*(.*)/);\n\n        if (match) {\n            if (currentKey) {\n                if (!headerObj[currentKey]) headerObj[currentKey] = [];\n                headerObj[currentKey].push({ [`${currentKey}`]: currentValue });\n            }\n\n            currentKey = match[1].toLowerCase();\n            currentValue = match[2];\n        } else {\n            currentValue += ' ' + line.trim();\n        }\n    });\n\n    if (currentKey) {\n        if (!headerObj[currentKey]) headerObj[currentKey] = [];\n        headerObj[currentKey].push({ [`${currentKey}Item`]: currentValue });\n    }\n  returnArray.push({\"header\":headerObj});\n}\n\nreturn returnArray;"
      },
      "typeVersion": 2
    },
    {
      "id": "1118176d-a315-439d-a3b6-fe4d40c900c6",
      "name": "Split Out IPs",
      "type": "n8n-nodes-base.itemLists",
      "position": [
        740,
        560
      ],
      "parameters": {
        "options": {
          "destinationFieldName": "ip"
        },
        "fieldToSplitOut": "ips"
      },
      "typeVersion": 3
    },
    {
      "id": "ef118900-11a6-418a-b1b3-159933d62cbf",
      "name": "Extract IPs from \"received\"",
      "type": "n8n-nodes-base.code",
      "position": [
        540,
        560
      ],
      "parameters": {
        "jsCode": "let ips = []\n\nfor (const item of $input.all()) {\n  const header = JSON.stringify(item.json.header.received);\n  console.log(header)\n  const ipRegex = /\\b\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\b/g;\n  const ipAddresses = header.match(ipRegex) || [];\n  ips.push(...ipAddresses);\n}\n\nreturn [\n  {\n    ips: ips\n  }\n];"
      },
      "typeVersion": 2,
      "alwaysOutputData": true
    },
    {
      "id": "ffefc1e2-214c-47d7-a7a3-104fefdccda1",
      "name": "IP Quality Score",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        920,
        560
      ],
      "parameters": {
        "url": "=https://ipqualityscore.com/api/json/ip/{{ Replace me with your API key, it can be found inside the api documentation, leave json.ip alone }}/{{ $json.ip }}?strictness=1&allow_public_access_points=true&lighter_penalties=true",
        "options": {}
      },
      "typeVersion": 4.1
    },
    {
      "id": "2f1c5b30-950c-4e0d-81a6-bf4c2c64f968",
      "name": "IP-API",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        1140,
        560
      ],
      "parameters": {
        "url": "=http://ip-api.com/json/{{ $('Split Out IPs').item.json.ip }}",
        "method": "POST",
        "options": {}
      },
      "typeVersion": 4.1
    },
    {
      "id": "c9cae845-63e8-475a-bc08-ba0552712394",
      "name": "Collect interesting data",
      "type": "n8n-nodes-base.set",
      "position": [
        1520,
        560
      ],
      "parameters": {
        "values": {
          "string": [
            {
              "name": "IP",
              "value": "={{ $('Split Out IPs').item.json.ip }}"
            },
            {
              "name": "fraud_score",
              "value": "={{ $('IP Quality Score').item.json.fraud_score }}"
            },
            {
              "name": "recent_abuse",
              "value": "={{ $('IP Quality Score').item.json.recent_abuse }}"
            },
            {
              "name": "Organization",
              "value": "={{ $('IP Quality Score').item.json.organization }}"
            },
            {
              "name": "tor",
              "value": "={{ $('IP Quality Score').item.json.tor }}"
            },
            {
              "name": "ISP",
              "value": "={{ $('IP-API').item.json.isp }}"
            },
            {
              "name": "recent_spam_activity",
              "value": "={{ $json.recent_spam_activity }}"
            },
            {
              "name": "ip_sender_reputation",
              "value": "={{ $json.ip_sender_reputation }}"
            }
          ]
        },
        "options": {
          "dotNotation": true
        },
        "keepOnlySet": true
      },
      "typeVersion": 2
    },
    {
      "id": "01b33cc9-b7b3-44e6-b683-b753e6daa2dc",
      "name": "SPF/DKIM/DMARC from \"authentication-results\"",
      "type": "n8n-nodes-base.code",
      "position": [
        520,
        1160
      ],
      "parameters": {
        "jsCode": "let mailAuth = [];\n\nfor (const item of $input.all()) {\n  // SPF\n  let spf = \"unknown\";\n  if( JSON.stringify(item.json.header[\"authentication-results\"]).includes(\"spf=pass\") ) {\n    spf = \"pass\";\n  } else if ( JSON.stringify(item.json.header[\"authentication-results\"]).includes(\"spf=fail\") ) {\n    spf = \"fail\";    \n  } else if ( JSON.stringify(item.json.header[\"authentication-results\"]).includes(\"spf=neutral\") ) {\n    spf = \"neutral\";\n  }\n\n  // DKIM\n  let dkim = \"unknown\";\n  if( JSON.stringify(item.json.header[\"authentication-results\"]).includes(\"dkim=pass\") ) {\n    dkim = \"pass\";\n  } else if ( JSON.stringify(item.json.header[\"authentication-results\"]).includes(\"dkim=fail\") ) {\n    dkim = \"fail\";    \n  } else if ( JSON.stringify(item.json.header[\"authentication-results\"]).includes(\"dkim=temperror\") ) {\n    dkim = \"error\";\n  }\n\n  // DMARC\n  let dmarc = \"unknown\";\n  if( JSON.stringify(item.json.header[\"authentication-results\"]).includes(\"dmarc=pass\") ) {\n    dmarc = \"pass\";\n  } else if ( JSON.stringify(item.json.header[\"authentication-results\"]).includes(\"dmarc=fail\") ) {\n    dmarc = \"fail\";    \n  }\n  \n  mailAuth.push({\n    \"spf\": spf,\n    \"dkim\": dkim,\n    \"dmarc\": dmarc\n  });\n}\n\nreturn mailAuth;"
      },
      "typeVersion": 2
    },
    {
      "id": "33923ec2-10db-4799-9b5e-a369cdd74640",
      "name": "SPF from \"received-spf\"",
      "type": "n8n-nodes-base.code",
      "position": [
        500,
        1858
      ],
      "parameters": {
        "jsCode": "let spfArray = [];\n\nfor (const item of $('Authentication Results Present?').all()) {\n    const spfList = item.json.header[\"received-spf\"];\n\n    if (!spfList || spfList.length == 0) {\n        spfArray.push(\"not-found\");\n    } else {\n        for (const spfItem of spfList) {\n            if (spfItem[\"received-spf\"].toLowerCase().includes(\"fail\")) {\n                spfArray.push(\"fail\");\n            } else if (spfItem[\"received-spf\"].toLowerCase().includes(\"pass\")) {\n                spfArray.push(\"pass\");\n            } else {\n                spfArray.push(\"found\");\n            }\n        }\n    }\n}\nreturn [{spf:spfArray.join(\",\")}];\n"
      },
      "typeVersion": 2,
      "alwaysOutputData": true
    },
    {
      "id": "9cec1f09-3887-46ec-aa25-b03a0ab34190",
      "name": "DKIM from \"dkim-signature\"",
      "type": "n8n-nodes-base.code",
      "position": [
        760,
        1858
      ],
      "parameters": {
        "jsCode": "let dkimArray = [];\n\nfor (const item of $('Authentication Results Present?').all()) {\n    const dkimList = item.json.header[\"dkim-signature\"];\n\n    if (!dkimList || dkimList.length == 0) { dkimArray.push(\"not-found\") } else {\n        dkimArray.push(\"found\");\n        return dkimArray;\n    }\n\n}\nreturn [{dkim:dkimArray.join(\",\")}];\n"
      },
      "typeVersion": 2,
      "alwaysOutputData": true
    },
    {
      "id": "0f856808-c044-4547-bc81-5e6d1208d9ad",
      "name": "DMARC from \"received-dmarc\"",
      "type": "n8n-nodes-base.code",
      "position": [
        1020,
        1858
      ],
      "parameters": {
        "jsCode": "let dmarcArray = [];\n\nfor (const item of $('Authentication Results Present?').all()) {\n    const dmarcList = item.json.header[\"received-dmarc\"];\n\n    if (!dmarcList || dmarcList.length == 0) {\n        dmarcArray.push(\"not-found\");\n    } else {\n        for (const dmarcItem of dmarcList) {\n            if (dmarcItem[\"received-dmarc\"].toLowerCase().includes(\"fail\")) {\n                dmarcArray.push(\"fail\");\n            } else if (dmarcItem[\"received-dmarc\"].toLowerCase().includes(\"pass\")) {\n                dmarcArray.push(\"pass\");\n            } else {\n                dmarcArray.push(\"found\");\n            }\n        }\n    }\n}\nreturn [{dmarc:dmarcArray.join(\",\")}];"
      },
      "typeVersion": 2,
      "alwaysOutputData": true
    },
    {
      "id": "0780dc59-8a4c-4355-9cdc-35b2505043a6",
      "name": "DKIM",
      "type": "n8n-nodes-base.switch",
      "position": [
        1260,
        2718
      ],
      "parameters": {
        "rules": {
          "rules": [
            {
              "value2": "spf=pass",
              "operation": "contains"
            },
            {
              "output": 1,
              "value2": "spf=fail",
              "operation": "contains"
            },
            {
              "output": 2,
              "value2": "spf=neutral",
              "operation": "contains"
            }
          ]
        },
        "value1": "={{ $('Authentication Results Present?').item.json.header['authentication-results'] }}",
        "dataType": "string",
        "fallbackOutput": 3
      },
      "typeVersion": 1
    },
    {
      "id": "3c8fe0f3-0b65-4366-9c1e-a2a7bcc35ed5",
      "name": "Extract Email Header from webhook",
      "type": "n8n-nodes-base.set",
      "position": [
        -99,
        740
      ],
      "parameters": {
        "values": {
          "string": [
            {
              "name": "header",
              "value": "={{ $json.body }}"
            }
          ]
        },
        "options": {},
        "keepOnlySet": true
      },
      "typeVersion": 2
    },
    {
      "id": "f6c06bc5-048c-433e-9bfa-f155ca6735e4",
      "name": "Received Headers Present?",
      "type": "n8n-nodes-base.if",
      "position": [
        300,
        660
      ],
      "parameters": {
        "conditions": {
          "number": [
            {
              "value1": "={{ $json.header.received.length }}",
              "operation": "larger"
            }
          ]
        }
      },
      "typeVersion": 1
    },
    {
      "id": "a92ef09c-0cc6-469c-98ff-8c6172615a4b",
      "name": "Authentication Results Present?",
      "type": "n8n-nodes-base.if",
      "position": [
        300,
        820
      ],
      "parameters": {
        "conditions": {
          "number": [
            {
              "value1": "={{ $json.header[\"authentication-results\"].length }}",
              "operation": "larger"
            }
          ]
        }
      },
      "typeVersion": 1
    },
    {
      "id": "aef7f739-dfef-40b1-b01f-29adad4a9bda",
      "name": "Aggregate Authentication Data",
      "type": "n8n-nodes-base.set",
      "position": [
        1280,
        1858
      ],
      "parameters": {
        "values": {
          "string": [
            {
              "name": "spf",
              "value": "={{ $('SPF from \"received-spf\"').all() }}"
            },
            {
              "name": "dkim",
              "value": "={{ $('DKIM from \"dkim-signature\"').all() }}"
            },
            {
              "name": "dmarc",
              "value": "={{ $('DMARC from \"received-dmarc\"').all() }}"
            }
          ]
        },
        "options": {},
        "keepOnlySet": true
      },
      "typeVersion": 2
    },
    {
      "id": "88888a82-815b-423a-85d3-8c86756d10cd",
      "name": "IP Data Merge",
      "type": "n8n-nodes-base.merge",
      "position": [
        1800,
        660
      ],
      "parameters": {},
      "typeVersion": 2.1
    },
    {
      "id": "b7add244-9759-450f-8b01-6ec4555a5971",
      "name": "Merge Security Data",
      "type": "n8n-nodes-base.merge",
      "position": [
        2171,
        760
      ],
      "parameters": {},
      "typeVersion": 2.1
    },
    {
      "id": "ef679cda-9420-44fd-90cc-23be1b166e2c",
      "name": "Join IP Analysis into one JSON object",
      "type": "n8n-nodes-base.itemLists",
      "position": [
        1960,
        660
      ],
      "parameters": {
        "options": {},
        "aggregate": "aggregateAllItemData",
        "operation": "concatenateItems",
        "destinationFieldName": "ipAnalysis"
      },
      "typeVersion": 3
    },
    {
      "id": "1e5ae57b-948c-40c8-8248-fcbda80264e2",
      "name": "Join results into one JSON object",
      "type": "n8n-nodes-base.itemLists",
      "position": [
        2391,
        760
      ],
      "parameters": {
        "options": {},
        "aggregate": "aggregateAllItemData",
        "operation": "concatenateItems",
        "destinationFieldName": "result"
      },
      "typeVersion": 3
    },
    {
      "id": "7fef7675-1350-4886-b184-f907dacf08b1",
      "name": "SPF Authentication Checker",
      "type": "n8n-nodes-base.switch",
      "position": [
        500,
        2718
      ],
      "parameters": {
        "rules": {
          "rules": [
            {
              "value2": "spf=pass",
              "operation": "contains"
            },
            {
              "output": 1,
              "value2": "spf=fail",
              "operation": "contains"
            },
            {
              "output": 2,
              "value2": "spf=neutral",
              "operation": "contains"
            }
          ]
        },
        "value1": "={{ JSON.stringify($json.header[\"authentication-results\"]) }}",
        "dataType": "string",
        "fallbackOutput": 3
      },
      "typeVersion": 1
    },
    {
      "id": "410ccb8c-a551-45a3-a487-b0ce15a56882",
      "name": "Set SPF Pass Status",
      "type": "n8n-nodes-base.set",
      "position": [
        920,
        2518
      ],
      "parameters": {
        "values": {
          "string": [
            {
              "name": "spf",
              "value": "pass"
            }
          ]
        },
        "options": {}
      },
      "typeVersion": 2
    },
    {
      "id": "127c0c91-162c-4cbb-b692-eb0675a55c42",
      "name": "Set SPF Fail Status",
      "type": "n8n-nodes-base.set",
      "position": [
        920,
        2658
      ],
      "parameters": {
        "values": {
          "string": [
            {
              "name": "spf",
              "value": "fail"
            }
          ]
        },
        "options": {}
      },
      "typeVersion": 2
    },
    {
      "id": "7a15ae91-012f-4fc8-9075-7f855b15d979",
      "name": "Set SPF Neutral Status",
      "type": "n8n-nodes-base.set",
      "position": [
        920,
        2798
      ],
      "parameters": {
        "values": {
          "string": [
            {
              "name": "spf",
              "value": "neutral"
            }
          ]
        },
        "options": {}
      },
      "typeVersion": 2
    },
    {
      "id": "2ac1e5ce-83a4-4205-9774-76506f06108e",
      "name": "Set SPF UnknownStatus",
      "type": "n8n-nodes-base.set",
      "position": [
        920,
        2938
      ],
      "parameters": {
        "values": {
          "string": [
            {
              "name": "spf",
              "value": "unknown"
            }
          ]
        },
        "options": {}
      },
      "typeVersion": 2
    }
  ],
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "connections": {
    "IP-API": {
      "main": [
        [
          {
            "node": "Fraud Score",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fraud Score": {
      "main": [
        [
          {
            "node": "Collect interesting data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IP Data Merge": {
      "main": [
        [
          {
            "node": "Join IP Analysis into one JSON object",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out IPs": {
      "main": [
        [
          {
            "node": "IP Quality Score",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Receive Headers": {
      "main": [
        [
          {
            "node": "Extract Email Header from webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IP Quality Score": {
      "main": [
        [
          {
            "node": "IP-API",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Security Data": {
      "main": [
        [
          {
            "node": "Join results into one JSON object",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set SPF Fail Status": {
      "main": [
        [
          {
            "node": "DKIM",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set SPF Pass Status": {
      "main": [
        [
          {
            "node": "DKIM",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Explode Email Header": {
      "main": [
        [
          {
            "node": "Received Headers Present?",
            "type": "main",
            "index": 0
          },
          {
            "node": "Authentication Results Present?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set SPF UnknownStatus": {
      "main": [
        [
          {
            "node": "DKIM",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set SPF Neutral Status": {
      "main": [
        [
          {
            "node": "DKIM",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "SPF from \"received-spf\"": {
      "main": [
        [
          {
            "node": "DKIM from \"dkim-signature\"",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Collect interesting data": {
      "main": [
        [
          {
            "node": "IP Data Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Received Headers Present?": {
      "main": [
        [
          {
            "node": "Extract IPs from \"received\"",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "IP Data Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "DKIM from \"dkim-signature\"": {
      "main": [
        [
          {
            "node": "DMARC from \"received-dmarc\"",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "SPF Authentication Checker": {
      "main": [
        [
          {
            "node": "Set SPF Pass Status",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Set SPF Fail Status",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Set SPF Neutral Status",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Set SPF UnknownStatus",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "DMARC from \"received-dmarc\"": {
      "main": [
        [
          {
            "node": "Aggregate Authentication Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract IPs from \"received\"": {
      "main": [
        [
          {
            "node": "Split Out IPs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate Authentication Data": {
      "main": [
        [
          {
            "node": "Merge Security Data",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Authentication Results Present?": {
      "main": [
        [
          {
            "node": "SPF/DKIM/DMARC from \"authentication-results\"",
            "type": "main",
            "index": 0
          },
          {
            "node": "SPF Authentication Checker",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "SPF from \"received-spf\"",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Email Header from webhook": {
      "main": [
        [
          {
            "node": "Explode Email Header",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Join results into one JSON object": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Join IP Analysis into one JSON object": {
      "main": [
        [
          {
            "node": "Merge Security Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "SPF/DKIM/DMARC from \"authentication-results\"": {
      "main": [
        [
          {
            "node": "Merge Security Data",
            "type": "main",
            "index": 1
          }
        ]
      ]
    }
  }
}