import dotenv from 'dotenv';
import { Pinecone } from '@pinecone-database/pinecone';
import OpenAI from 'openai';
import fs from 'fs/promises';
import path from 'path';

dotenv.config();

// Configuration
const TEST_PROMPT = "Je veux un workflow n8n qui re√ßoit un sujet via un webhook, utilise l'API de Perplexity pour chercher des infos, r√©sume les r√©sultats avec GPT-4, puis g√©n√®re un article SEO complet et me l'envoie par email dans un Google Doc.";

async function diagnosticPineconeIndexing() {
  console.log('üîç === DIAGNOSTIC INDEXATION PINECONE ===');
  console.log(`üìù Test prompt: "${TEST_PROMPT}"`);
  console.log(`üìä Index utilis√©: ${process.env.PINECONE_WORKFLOW_INDEX}`);
  console.log('');

  // Initialiser les services
  const pinecone = new Pinecone({
    apiKey: process.env.PINECONE_API_KEY
  });

  const openai = new OpenAI({
    apiKey: process.env.OPENAI_API_KEY,
  });

  const index = pinecone.index(process.env.PINECONE_WORKFLOW_INDEX);

  try {
    // 1. V√©rifier les stats de l'index
    console.log('üìä === STATS INDEX PINECONE ===');
    const stats = await index.describeIndexStats();
    console.log(`üìà Total vecteurs: ${stats.totalVectorCount}`);
    console.log(`üóÉÔ∏è Namespaces: ${Object.keys(stats.namespaces || {}).length}`);
    console.log('');

    // 2. G√©n√©rer l'embedding du prompt test
    console.log('üß† === G√âN√âRATION EMBEDDING ===');
    const embeddingResponse = await openai.embeddings.create({
      model: 'text-embedding-3-small',
      input: TEST_PROMPT,
      encoding_format: 'float'
    });
    
    const queryEmbedding = embeddingResponse.data[0].embedding;
    console.log(`‚úÖ Embedding g√©n√©r√©: ${queryEmbedding.length} dimensions`);
    console.log('');

    // 3. Rechercher dans Pinecone avec plus de d√©tails
    console.log('üîç === RECHERCHE PINECONE D√âTAILL√âE ===');
    const searchResults = await index.query({
      vector: queryEmbedding,
      topK: 10, // Plus de r√©sultats pour analyse
      includeMetadata: true
    });

    console.log(`üìä Trouv√© ${searchResults.matches?.length || 0} r√©sultats:`);
    console.log('');

    // 4. Analyser chaque r√©sultat
    if (searchResults.matches) {
      for (let i = 0; i < searchResults.matches.length; i++) {
        const match = searchResults.matches[i];
        
        console.log(`üéØ === R√âSULTAT ${i + 1} ===`);
        console.log(`üìÑ ID: ${match.id}`);
        console.log(`üìä Score: ${match.score.toFixed(4)}`);
        console.log(`üìÅ Filename: ${match.metadata?.filename || 'N/A'}`);
        console.log(`üè∑Ô∏è Name: ${match.metadata?.name || 'N/A'}`);
        console.log(`üî¢ Node count: ${match.metadata?.nodeCount || 0}`);
        console.log(`üîß Node types: ${(match.metadata?.nodeTypes || []).slice(0, 3).join(', ')}`);
        
        // Afficher la description (ce qui est index√©)
        if (match.metadata?.description) {
          const desc = match.metadata.description;
          console.log(`üìù Description index√©e (${desc.length} chars):`);
          console.log(`   "${desc.substring(0, 300)}${desc.length > 300 ? '...' : ''}"`);
        }
        
        if (match.metadata?.descriptionSnippet) {
          console.log(`üí° Snippet: "${match.metadata.descriptionSnippet}"`);
        }
        
        console.log('');
      }
    }

    // 5. Analyser le workflow probl√©matique sp√©cifiquement
    console.log('üö® === ANALYSE WORKFLOW PROBL√âMATIQUE ===');
    const problematicWorkflow = searchResults.matches?.find(m => 
      m.metadata?.name?.includes('Auto-Post') && m.metadata?.name?.includes('vide')
    );
    
    if (problematicWorkflow) {
      console.log(`‚ùó Workflow probl√©matique trouv√© avec score: ${problematicWorkflow.score.toFixed(4)}`);
      console.log(`üìù Description compl√®te:`);
      console.log(problematicWorkflow.metadata.description);
      console.log('');
      
      // Analyser pourquoi il a match√©
      console.log('üîç === ANALYSE DE CORRESPONDANCE ===');
      const description = problematicWorkflow.metadata.description.toLowerCase();
      const prompt = TEST_PROMPT.toLowerCase();
      
      const commonWords = ['google', 'api', 'workflow', 'automation', 'content', 'data', 'request'];
      const matches = commonWords.filter(word => 
        description.includes(word) && prompt.includes(word)
      );
      
      console.log(`üéØ Mots-cl√©s communs: ${matches.join(', ')}`);
      
      if (description.includes('google')) console.log(`   üìä "Google" trouv√© dans description`);
      if (description.includes('api')) console.log(`   üìä "API" trouv√© dans description`);
      if (description.includes('content')) console.log(`   üìä "Content" trouv√© dans description`);
      
    } else {
      console.log('‚úÖ Workflow probl√©matique non trouv√© dans le top 10');
    }

    // 6. Recommandations
    console.log('üí° === RECOMMANDATIONS ===');
    console.log('1. Les descriptions GPT-4 sont bien index√©es (pas les JSON bruts)');
    console.log('2. Le probl√®me vient de descriptions trop g√©n√©ralistes');
    console.log('3. Solutions possibles :');
    console.log('   - Am√©liorer les descriptions GPT-4 pour √™tre plus sp√©cifiques');
    console.log('   - Ajouter des mots-cl√©s n√©gatifs dans la recherche');
    console.log('   - Filtrer les workflows "vides" ou incompl√®tes');
    console.log('   - Augmenter le seuil de score minimum');

    // 7. Sauvegarder les r√©sultats
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    const outputFile = path.join(process.cwd(), 'debug', `pinecone-diagnostic-${timestamp}.json`);
    
    const diagnosticData = {
      prompt: TEST_PROMPT,
      indexStats: stats,
      searchResults: searchResults.matches?.map(m => ({
        id: m.id,
        score: m.score,
        metadata: m.metadata
      })),
      problematicWorkflow: problematicWorkflow ? {
        id: problematicWorkflow.id,
        score: problematicWorkflow.score,
        name: problematicWorkflow.metadata?.name,
        description: problematicWorkflow.metadata?.description
      } : null
    };
    
    await fs.writeFile(outputFile, JSON.stringify(diagnosticData, null, 2));
    console.log(`üíæ Diagnostic complet sauvegard√©: ${outputFile}`);

  } catch (error) {
    console.error('‚ùå Erreur:', error.message);
    throw error;
  }
}

// Ex√©cuter le diagnostic
diagnosticPineconeIndexing().catch(console.error); 