import dotenv from 'dotenv';
import { createWorkflowRAGService } from '../api/rag/workflow-rag-service.js';
import fs from 'fs/promises';
import path from 'path';

// Charger les variables d'environnement
dotenv.config();

// Configuration du test
const TEST_PROMPT = "Je veux un workflow n8n qui re√ßoit un sujet via un webhook, utilise l'API de Perplexity pour chercher des infos, r√©sume les r√©sultats avec GPT-4, puis g√©n√®re un article SEO complet et me l'envoie par email dans un Google Doc.";

async function testCreationMode() {
  console.log('üß™ === TEST MODE CR√âATION ===');
  console.log(`üìù Prompt: "${TEST_PROMPT}"`);
  console.log(`‚è∞ D√©but: ${new Date().toISOString()}`);
  
  const startTime = Date.now();
  
  // Collecter tous les logs de progression
  const progressLogs = [];
  const ragFilesUsed = [];
  
  // Callback pour capturer les logs
  const onProgress = (stage, data) => {
    const logEntry = {
      timestamp: new Date().toISOString(),
      stage,
      data
    };
    progressLogs.push(logEntry);
    
    console.log(`\nüìä [${stage.toUpperCase()}] ${data.message || 'Event'}`);
    
    // Capturer les workflows similaires trouv√©s
    if (stage === 'context_building' && data.workflows) {
      console.log(`üìÅ Workflows trouv√©s: ${data.workflows.join(', ')}`);
      ragFilesUsed.push(...data.workflows);
    }
    
    // Afficher d'autres d√©tails selon le stage
    switch (stage) {
      case 'search':
        console.log(`   üîç Recherche en cours...`);
        break;
      case 'context_building':
        console.log(`   üèóÔ∏è ${data.workflows?.length || 0} workflows charg√©s`);
        break;
      case 'claude_call':
        console.log(`   ü§ñ Prompt: ${data.promptLength} caract√®res`);
        break;
      case 'compression':
        console.log(`   üóúÔ∏è Workflow: ${data.nodesCount} n≈ìuds`);
        break;
      case 'complete':
        console.log(`   ‚úÖ Workflow g√©n√©r√© avec succ√®s!`);
        break;
      case 'error':
        console.log(`   ‚ùå Erreur: ${data.message || data.error}`);
        break;
    }
  };

  try {
    // Initialiser le service RAG
    console.log('\nüîß Initialisation du service RAG...');
    const ragService = createWorkflowRAGService();
    console.log('‚úÖ Service RAG initialis√©');

    // G√©n√©rer le workflow (MODE CR√âATION - pas de baseWorkflow)
    console.log('\nüöÄ G√©n√©ration du workflow...');
    const result = await ragService.generateWorkflowFromExamplesWithStreaming(
      TEST_PROMPT,
      {
        topK: 3,
        workflowName: 'Test Workflow SEO',
        baseWorkflow: null, // MODE CR√âATION
        onProgress
      }
    );

    const duration = Date.now() - startTime;
    
    // Analyser les r√©sultats
    console.log('\nüéØ === R√âSULTATS ===');
    console.log(`‚è±Ô∏è Dur√©e totale: ${(duration / 1000).toFixed(1)}s`);
    console.log(`‚úÖ Succ√®s: ${result.success}`);
    
    if (result.success) {
      console.log(`üìä N≈ìuds g√©n√©r√©s: ${result.workflow?.nodes?.length || 0}`);
      console.log(`üîó Connexions: ${Object.keys(result.workflow?.connections || {}).length}`);
      console.log(`üìÅ Fichiers RAG utilis√©s: ${ragFilesUsed.length}`);
      
      // Afficher les fichiers RAG utilis√©s
      console.log('\nüìÅ === FICHIERS RAG UTILIS√âS ===');
      ragFilesUsed.forEach((filename, i) => {
        console.log(`${i + 1}. ${filename}`);
      });
      
      // Afficher un aper√ßu de l'explication
      if (result.explanation) {
        console.log('\nüìù === EXPLICATION ===');
        console.log(`R√©sum√©: ${result.explanation.summary}`);
        console.log(`Flow: ${result.explanation.flow}`);
        console.log(`N≈ìuds: ${result.explanation.nodes}`);
        console.log(`Notes: ${result.explanation.notes}`);
      }
      
      // Sauvegarder les r√©sultats
      const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
      const outputDir = path.join(process.cwd(), 'debug');
      
      try {
        await fs.mkdir(outputDir, { recursive: true });
        
        // Sauvegarder le workflow g√©n√©r√©
        const workflowFile = path.join(outputDir, `test-creation-workflow-${timestamp}.json`);
        await fs.writeFile(workflowFile, JSON.stringify(result.workflow, null, 2));
        console.log(`üíæ Workflow sauvegard√©: ${workflowFile}`);
        
        // Sauvegarder l'explication
        const explanationFile = path.join(outputDir, `test-creation-explanation-${timestamp}.json`);
        await fs.writeFile(explanationFile, JSON.stringify(result.explanation, null, 2));
        console.log(`üíæ Explication sauvegard√©e: ${explanationFile}`);
        
        // Sauvegarder les logs complets
        const logsFile = path.join(outputDir, `test-creation-logs-${timestamp}.json`);
        const completeLog = {
          prompt: TEST_PROMPT,
          duration,
          success: result.success,
          ragFilesUsed,
          progressLogs,
          result,
          stats: {
            nodes: result.workflow?.nodes?.length || 0,
            connections: Object.keys(result.workflow?.connections || {}).length,
            transmissionType: result.transmissionType
          }
        };
        await fs.writeFile(logsFile, JSON.stringify(completeLog, null, 2));
        console.log(`üíæ Logs complets sauvegard√©s: ${logsFile}`);
        
      } catch (saveError) {
        console.error('‚ùå Erreur sauvegarde:', saveError.message);
      }
      
    } else {
      console.log(`‚ùå Erreur: ${result.error}`);
      if (result.rawResponse) {
        console.log(`üìú R√©ponse brute: ${result.rawResponse.substring(0, 500)}...`);
      }
    }
    
    // Afficher les workflows similaires utilis√©s
    if (result.similarWorkflows && result.similarWorkflows.length > 0) {
      console.log('\nüîç === WORKFLOWS SIMILAIRES UTILIS√âS ===');
      result.similarWorkflows.forEach((name, i) => {
        console.log(`${i + 1}. ${name}`);
      });
    }
    
  } catch (error) {
    console.error('\n‚ùå === ERREUR CRITIQUE ===');
    console.error('Message:', error.message);
    console.error('Stack:', error.stack);
    
    // Sauvegarder l'erreur pour debug
    try {
      const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
      const errorFile = path.join(process.cwd(), 'debug', `test-creation-error-${timestamp}.json`);
      await fs.writeFile(errorFile, JSON.stringify({
        error: error.message,
        stack: error.stack,
        prompt: TEST_PROMPT,
        progressLogs,
        ragFilesUsed
      }, null, 2));
      console.log(`üíæ Erreur sauvegard√©e: ${errorFile}`);
    } catch (saveError) {
      console.error('‚ùå Impossible de sauvegarder l\'erreur:', saveError.message);
    }
  }
  
  console.log('\nüèÅ === FIN DU TEST ===');
}

// Ex√©cuter le test
testCreationMode().catch(console.error); 